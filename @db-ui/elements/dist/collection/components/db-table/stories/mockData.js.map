{"version":3,"file":"mockData.js","sourceRoot":"","sources":["../../../../src/components/db-table/stories/mockData.ts"],"names":[],"mappings":"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","sourcesContent":["import { faker } from '@faker-js/faker';\n\n// function getRandomInt(min, max) {\n//   min = Math.ceil(min);\n//   max = Math.floor(max);\n//   return Math.floor(Math.random() * (max - min)) + min;\n// }\n\nconst getAdjectives = (num) =>\n  [...Array(num).keys()].map(() => faker.word.adjective());\n\nconst getAdjectiveWithIcon = (num, withIcon) =>\n  [...Array(num).keys()].map(() => [\n    withIcon ? 'account' : null,\n    faker.word.adjective()\n  ]);\n\nexport default () => {\n  const headers = [...Array(6).keys()].map(() => faker.name.firstName());\n\n  return JSON.stringify({\n    caption: faker.lorem.sentence(),\n    headers,\n    columns: {\n      [headers[0]]: getAdjectiveWithIcon(5, true),\n      [headers[1]]: getAdjectiveWithIcon(5, false),\n      [headers[2]]: getAdjectiveWithIcon(5, false),\n      [headers[3]]: getAdjectiveWithIcon(5, true),\n      [headers[4]]: getAdjectiveWithIcon(5, true),\n      [headers[5]]: getAdjectiveWithIcon(5, false)\n    }\n  });\n};\n\nexport const fullColumnMockData = () => {\n  const headers = [...Array(6).keys()].map(() => faker.name.firstName());\n  const rowTitle = \"I'm a row title\";\n  const rowTitles = [...Array(6).keys()].map(() => faker.name.firstName());\n\n  return JSON.stringify({\n    caption: faker.lorem.sentence(),\n    headers,\n    rowTitle,\n    rowTitles,\n    columns: {\n      [headers[0]]: getAdjectiveWithIcon(5, true),\n      [headers[1]]: getAdjectiveWithIcon(3, false),\n      [headers[2]]: getAdjectiveWithIcon(9, true),\n      [headers[3]]: getAdjectiveWithIcon(5, true),\n      [headers[4]]: getAdjectiveWithIcon(7, false),\n      [headers[5]]: getAdjectiveWithIcon(11, false)\n    }\n  });\n};\n\nexport const rowMockData = () => {\n  const headers = [...Array(8).keys()].map(() => faker.name.firstName());\n  const rowTitle = \"I'm a row title\";\n  const rowTitles = [...Array(8).keys()].map(() => faker.name.firstName());\n  const rows = [\n    {\n      [headers[0]]: [undefined, getAdjectives(1).toString()],\n      [headers[1]]: ['account', getAdjectives(1).toString()],\n      [headers[2]]: [undefined, getAdjectives(1).toString()],\n      [headers[3]]: [undefined, getAdjectives(1).toString()],\n      [headers[4]]: ['account', getAdjectives(1).toString()],\n      [headers[5]]: [undefined, getAdjectives(1).toString()],\n      [headers[6]]: ['close', getAdjectives(1).toString()],\n      [headers[7]]: [undefined, getAdjectives(1).toString()],\n      [headers[8]]: [undefined, getAdjectives(1).toString()],\n      [headers[9]]: ['close', getAdjectives(1).toString()]\n    },\n    {\n      [headers[1]]: [undefined, getAdjectives(1).toString()],\n      [headers[2]]: [undefined, getAdjectives(1).toString()],\n      [headers[4]]: ['account', getAdjectives(1).toString()],\n      [headers[6]]: [undefined, getAdjectives(1).toString()],\n      [headers[8]]: [undefined, getAdjectives(1).toString()]\n    },\n    {\n      [headers[3]]: ['close', getAdjectives(1).toString()],\n      [headers[5]]: [undefined, getAdjectives(1).toString()],\n      [headers[6]]: [undefined, getAdjectives(1).toString()],\n      [headers[7]]: [undefined, getAdjectives(1).toString()],\n      [headers[8]]: [undefined, getAdjectives(1).toString()],\n      [headers[9]]: [undefined, getAdjectives(1).toString()]\n    }\n  ];\n\n  return JSON.stringify({\n    caption: faker.lorem.sentence(),\n    headers,\n    rowTitle,\n    rowTitles,\n    rows\n  });\n};\n\nexport const brokenMockData = {\n  caption: 'Broken Table',\n  headers: ['I am not present in columns'],\n  columns: {\n    'something is rotten': ['in the state of Denmark']\n  }\n};\n"]}