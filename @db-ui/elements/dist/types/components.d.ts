/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "./stencil-public-runtime";
export namespace Components {
    interface DbAccordion {
        /**
          * The emphasis to highlight the summary.
         */
        "emphasis"?: boolean;
        /**
          * The emphasis to highlight the summary.
         */
        "open"?: boolean;
        /**
          * The size increase the size of the summary.
         */
        "size"?: 'small' | 'regular' | 'large';
        /**
          * The summary which shows the text which is visible when the accordion is collapsed.
         */
        "summary": string;
    }
    interface DbBrand {
        /**
          * The alt attribute can be set to define the alternative text for the DB logo.
         */
        "alt"?: string;
        /**
          * The href attribute can be set to reload the current application, in general you would go to the base path of your app.
         */
        "anchorRef": string;
        /**
          * The rel attribute can be set to make a relationship to the current URL(https://developer.mozilla.org/en-US/docs/web/api/htmlanchorelement/rel).
         */
        "anchorRelation"?: string;
        /**
          * The title attribute can be set to show a hint while hovering over the brand.
         */
        "anchorTitle"?: string;
        /**
          * The site-name-link attribute can be set to make the siteName clickable (set url to root) as well.
         */
        "siteNameLink"?: boolean;
        /**
          * The src attribute can be set to define another path for the DB logo.
         */
        "src"?: string;
    }
    interface DbBreadcrumb {
        /**
          * an optional [`aria-label`-attribute](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-label)
         */
        "arialabel": string;
        /**
          * The data attribute can be used to generate breadcrumb by data.
         */
        "data"?: string;
    }
    interface DbButton {
        /**
          * If the button controls a grouping of other elements, the ariaexpanded state indicates whether the controlled grouping is currently expanded or collapsed.
         */
        "ariaexpanded"?: 'true' | 'false';
        /**
          * Defines the button as a toggle button. The value of aria-pressed describes the state of the button.
         */
        "ariapressed"?: 'true' | 'false';
        /**
          * The disabled attribute can be set to keep a user from clicking on the button.
         */
        "disabled"?: boolean;
        /**
          * The formaction attribute specifies where to send the form-data when a form is submitted. Only for type="submit".
         */
        "formaction"?: string;
        /**
          * The formenctype attribute specifies how form-data should be encoded before sending it to a server. Only for type="submit".
         */
        "formenctype"?: string;
        /**
          * The formmethod attribute specifies how to send the form-data (which HTTP method to use). Only for type="submit".
         */
        "formmethod"?: 'get' | 'post';
        /**
          * The formnovalidate attribute specifies which that the form-data should not be validated on submission. Only for type="submit".
         */
        "formnovalidate"?: boolean;
        /**
          * The formtarget attribute specifies where to display the response after submitting the form. Only for type="submit".
         */
        "formtarget"?: '_self' | '_blank' | '_parent' | '_top';
        /**
          * Define an icon by it's identifier (like e.g. _download_, compare to [DB UI Icons](https://db-ui.github.io/core/patterns/base-icons/index.html)) to get displayed in front of the elements content.
         */
        "icon"?: string;
        /**
          * Define an icon by it's identifier (like e.g. _download_, compare to [DB UI Icons](https://db-ui.github.io/core/patterns/base-icons/index.html)) to get displayed behind the elements content.
         */
        "iconafter"?: string;
        /**
          * Define the text next to the icon specified via the icon Property to get hidden.
         */
        "icononly"?: boolean;
        /**
          * The name attribute specifies a name for the button.
         */
        "name"?: string;
        /**
          * The size attribute specifies the button size out of three sizes.
         */
        "size"?: 'small' | 'regular' | 'large';
        /**
          * The tooltip attribute specifies the title of button.
         */
        "tooltip"?: string;
        /**
          * The type attribute specifies the type of button.
         */
        "type": 'button' | 'reset' | 'submit';
        /**
          * The value attribute specifies an initial value for the button.
         */
        "value"?: string;
        /**
          * The variant attribute specifies a visual expression of button.
         */
        "variant": | 'primary'
    | 'secondary-outline'
    | 'secondary-solid'
    | 'tertiary-plain'
    | 'brand-primary';
    }
    interface DbCard {
        /**
          * The alt attribute for the image.
         */
        "alt": string;
        /**
          * The content represents the content of the card. It's optional and you can use slot for custom tags.
         */
        "content": string;
        /**
          * The header represents the title of the card. It's optional and you can use slot for custom tags.
         */
        "header": string;
        /**
          * The illustration which will show a predefined svg. -Development: enum can be generated with /scripts/illustration-generator-
         */
        "illustration": | 'alarm-clock'
    | 'bicycle'
    | 'blizzard'
    | 'broken'
    | 'buggy'
    | 'bus'
    | 'calendar'
    | 'car'
    | 'chat'
    | 'christmas'
    | 'clock-moving'
    | 'coffee-cup'
    | 'compass'
    | 'construction-sign'
    | 'construction-worker'
    | 'customer-feedback'
    | 'db-clock'
    | 'db-comfort-checkin'
    | 'db-ticket-shop'
    | 'db-ticket-vending-machine'
    | 'db-trainstation-with-train'
    | 'db-trainstation'
    | 'db-travel-center'
    | 'db-video-travel-center'
    | 'delayed'
    | 'der-kleine-ice'
    | 'diamond'
    | 'disruptions'
    | 'distance'
    | 'error'
    | 'ffp2-mask-with-sign'
    | 'ffp2-mask'
    | 'fokus'
    | 'gaming-no-wire'
    | 'gaming'
    | 'green-energy'
    | 'green'
    | 'handshake'
    | 'handwashing'
    | 'hashtag'
    | 'heart'
    | 'home'
    | 'information'
    | 'itinerary'
    | 'kiosk'
    | 'laptop'
    | 'local-train'
    | 'location'
    | 'lost-and-found'
    | 'luggage'
    | 'mask'
    | 'mini-store'
    | 'mobileticket-brand'
    | 'mobileticket-feature'
    | 'movie'
    | 'news'
    | 'newsletter'
    | 'newspaper'
    | 'no-handshaking'
    | 'onlineshop-brand'
    | 'onlineshop-feature'
    | 'onlineticket-brand'
    | 'onlineticket-feature'
    | 'passenger-rights'
    | 'podcast'
    | 'poi-berlin-copy'
    | 'poi-berlin'
    | 'restaurant'
    | 'savings'
    | 'scan-ticket-printout'
    | 'search'
    | 'self-driving'
    | 'show-ticket'
    | 'single-entry'
    | 'smartphone'
    | 'sport'
    | 'suitcase'
    | 'tablet'
    | 'thunderstorm'
    | 'tickets'
    | 'timetable'
    | 'tips'
    | 'transportation-advertising'
    | 'whats-schmutzig'
    | 'wifi';
        /**
          * The prop image can be used instead of illustration to show a custom img.
         */
        "image": string;
        /**
          * The illustration-path defines the path to DB UI Core illustrations. If you want to use other/custom images use the image prop instead.
         */
        "uiCoreIllustrationPath": string;
        /**
          * The variant which is banner or title.
         */
        "variant": 'banner' | 'title';
    }
    interface DbCards {
    }
    interface DbCheckbox {
        /**
          * The autofocus content attribute allows the author to indicate that a control is to be focused as soon as the page is loaded, allowing the user to just start typing without having to manually focus the main control.
         */
        "autofocus": boolean;
        /**
          * The checked content attribute is a boolean attribute that gives the default checkedness of the input element.
         */
        "checked": boolean;
        /**
          * The disabled attribute can be set to keep a user from clicking on the input.
         */
        "disabled": boolean;
        /**
          * The indeterminate attribute is a boolean attribute. When specified, the element is is displayed in an indeterminate state (neither checked, nor unchecked).
         */
        "indeterminate": boolean;
        /**
          * The input_id of a labelable form-related element in the same document as the label element. The first element in the document with an id matching the value of the for attribute is the labeled control for this label element, if it is a labelable element.
         */
        "input_id": string;
        /**
          * The label attribute specifies the caption of the input.
         */
        "label": string;
        /**
          * The name content attribute gives the name of the form control, as used in form submission and in the form element's elements object. If the attribute is specified, its value must not be the empty string.
         */
        "name": string;
        /**
          * The required attribute is a boolean attribute. When specified, the element is required.
         */
        "required": boolean;
        /**
          * Method that acceps a boolean and sets the indeterminate state of the checkbox accordingly.
         */
        "setIndeterminate": (bool: boolean) => Promise<void>;
        /**
          * The value content attribute gives the default value of the input element.
         */
        "value": string;
    }
    interface DbChip {
        /**
          * The disabled attribute can be set to keep a user from clicking on the chip.
         */
        "disabled"?: boolean;
        /**
          * Attribute to add icon before chip.
         */
        "icon": string;
        /**
          * Attribute to add icon after chip.
         */
        "iconafter"?: string;
        /**
          * The input_id of a label form-related element in the same document as the label element. The first element in the document with an id matching the value of the for attribute is the labeled control for this label element, if it is a label element.
         */
        "input_id": string;
        /**
          * Decides which interactiontype you want to use: filter (1-n); selection (1);
         */
        "interactiontype": 'filter' | 'selection';
        /**
          * Name to group multiple chips.
         */
        "name": string;
        /**
          * Selected state
         */
        "selected"?: boolean;
        /**
          * Predefined variants to change background color and font color.
         */
        "variant": | 'informative'
    | 'success'
    | 'warning'
    | 'error'
    | 'track'
    | 'poi-essen-trinken'
    | 'poi-einkaufen'
    | 'poi-gesundheit'
    | 'poi-kunst-kultur'
    | 'poi-wissenswertes'
    | 'poi-freizeit'
    | 'poi-zivile-rel-einrichtungen'
    | 'poi-dienstleistungen'
    | 'poi-db-services-einrichtung'
    | 'poi-wegeleitung';
    }
    interface DbDropdown {
        /**
          * The data attribute can be used to generate dropdown by data.
         */
        "data"?: string;
        /**
          * The opposite attribute, changes the behaviour: dropdown -> left.
         */
        "opposite": boolean;
        /**
          * The summary attribute, shows a text for accessibility.
         */
        "summary": string;
    }
    interface DbFooter {
        /**
          * The border attribute can be set to add a border on top of the footer.
         */
        "border"?: boolean;
        /**
          * The copyright attribute can be set to enable a copyright string with current year.
         */
        "copyright"?: boolean;
    }
    interface DbHeader {
    }
    interface DbHeadline {
        /**
          * The pulse attribute determines whether to add a visual DB Pulse to the headline.
         */
        "pulse"?: boolean;
        /**
          * The variant attribute specifies the size of the headline.
         */
        "variant": '1' | '2' | '3' | '4' | '5' | '6';
    }
    interface DbIcon {
        /**
          * The icon attribute specifies the icon to use.
         */
        "icon": string;
        /**
          * The variant attribute specifies the style and size of an icon.
         */
        "variant": | '16-filled'
    | '20-filled'
    | '24-filled'
    | '32-filled'
    | '48-filled'
    | '64-filled'
    | '16-outline'
    | '20-outline'
    | '24-outline'
    | '32-outline'
    | '48-outline'
    | '64-outline';
    }
    interface DbImage {
        /**
          * The alt attribute is used by "screen reader" software so that a person who is listening to the content of a webpage (for instance, a person who is blind) can interact with this element.
         */
        "alt": string;
        /**
          * Optional id for the caption aria label - otherwise random id will be set
         */
        "ariaid": string;
        /**
          * Optional caption for the image
         */
        "caption": string;
        /**
          * Height for the image
         */
        "height": number;
        /**
          * Optional lazy loading attribute
         */
        "loading": 'lazy';
        /**
          * Optional modern image format srcset URL (like avif or webp).
         */
        "modernformat": string;
        /**
          * Optional responsive media queries as array of objects '[{srcset:"/path/to/picture.extension", media:"(min-width: 768px)"}]'
         */
        "responsivemediaquery": string;
        /**
          * The image src URL.
         */
        "src": string;
        /**
          * Optional srcset for high density images
         */
        "srcset": string;
        /**
          * Width for the image
         */
        "width": number;
    }
    interface DbInput {
        /**
          * The ariainvalid attribute is used to indicate that the value entered into an input field does not conform to the format expected by the application.
         */
        "ariainvalid"?: | 'false'
    | 'grammar'
    | 'spelling'
    | 'true';
        /**
          * The ariarequired attribute can be applied to a form element, to indicate to an AT that it is required to complete the form.
         */
        "ariarequired"?: 'false' | 'true';
        /**
          * User agents sometimes have features for helping users fill forms in, for example prefilling the user's address based on earlier user input.
         */
        "autocomplete"?: 'off' | 'on';
        /**
          * The autofocus content attribute allows the author to indicate that a control is to be focused as soon as the page is loaded, allowing the user to just start typing without having to manually focus the main control.
         */
        "autofocus": boolean;
        /**
          * The description attribute specifies the description/hint of the input.
         */
        "description"?: string;
        /**
          * The dirname attribute on a form control element enables the submission of the directionality of the element, and gives the name of the control that contains this value during form submission. If such an attribute is specified, its value must not be the empty string.
         */
        "dirname"?: string;
        /**
          * The disabled attribute can be set to keep a user from clicking on the input.
         */
        "disabled": boolean;
        /**
          * The input_id of a labelable form-related element in the same document as the label element. The first element in the document with an id matching the value of the for attribute is the labeled control for this label element, if it is a labelable element.
         */
        "input_id"?: string;
        /**
          * The label attribute specifies the caption of the input.
         */
        "label": string;
        /**
          * The list attribute is used to identify an element that lists predefined options suggested to the user.
         */
        "list"?: string;
        /**
          * The max attribute specifies the maximum value that is sufficient for this input.
         */
        "max"?: number;
        /**
          * /* The maxlength attribute, controlled by a dirty value flag, declares a limit on the number of characters a user can input.
         */
        "maxlength"?: number;
        /**
          * The min attribute specifies the minimum value that is sufficient for this input.
         */
        "min"?: number;
        /**
          * /* The minlength attribute, when it applies, is a form control minlength attribute.
         */
        "minlength"?: number;
        /**
          * The name content attribute gives the name of the form control, as used in form submission and in the form element's elements object. If the attribute is specified, its value must not be the empty string.
         */
        "name"?: string;
        /**
          * The pattern attribute specifies a regular expression against which the control's value is to be checked.
         */
        "pattern"?: string;
        /**
          * The placeholder attribute represents a short hint (a word or short phrase) intended to aid the user with data entry.
         */
        "placeholder"?: string;
        /**
          * The readonly attribute controls whether or not the user can edit the form control.
         */
        "readonly"?: boolean;
        /**
          * The required attribute is a boolean attribute. When specified, the element is required.
         */
        "required"?: boolean;
        /**
          * The size attribute gives the number of characters that, in a visual rendering, the user agent is to allow the user to see while editing the element's value.
         */
        "size"?: number;
        /**
          * The step attribute specifies the granularity that the value must obey to on increasing or decreasing by the users selection.
         */
        "step"?: number;
        /**
          * The type attribute changes the input type to text, number etc.
         */
        "type"?: string;
        /**
          * The value content attribute gives the default value of the input element.
         */
        "value"?: string;
        /**
          * The variant attribute specifies a visual expression of a select.
         */
        "variant"?: | 'semitransparent'
    | 'white'
    | 'solid'
    | 'outline';
    }
    interface DbLanguageSwitcher {
        /**
          * The aria-selected-index shows the link as selected which has the given index.
         */
        "ariaSelectedIndex": number;
        /**
          * The data attribute can be used to generate linklist by data.
         */
        "data"?: string;
    }
    interface DbLink {
        /**
          * The current attribute is the state on an element indicates that this element represents the current item within a container or set of related elements.
         */
        "current": | 'page'
    | 'step'
    | 'location'
    | 'date'
    | 'time'
    | 'true'
    | 'false';
        /**
          * The href attribute represents a hyperlink (a hypertext anchor).
         */
        "href": string;
        /**
          * The hreflang attribute gives the language of the linked resource. The value must be a valid BCP 47 language tag.
         */
        "hreflang": string;
        /**
          * Define an icon by it's identifier (like e.g. _download_, compare to [DB UI Icons](https://db-ui.github.io/core/patterns/base-icons/index.html)) to get displayed in front of the elements content.
         */
        "icon"?: string;
        /**
          * The variant attribute specifies the style and size of an icon.
         */
        "iconVariant"?: | '16-filled'
    | '20-filled'
    | '24-filled'
    | '32-filled'
    | '48-filled'
    | '64-filled'
    | '16-outline'
    | '20-outline'
    | '24-outline'
    | '32-outline'
    | '48-outline'
    | '64-outline';
        /**
          * Define the text next to the icon specified via the icon Property to get hidden.
         */
        "icononly"?: boolean;
        /**
          * The media attribute describes for which media the target document was designed. The value must be a valid media query. The default, if the media attribute is omitted, is "all".
         */
        "media": string;
        /**
          * The rel attribute controls what kinds of links the elements create. The attribue's value must be a set of space-separated tokens. The allowed keywords and their meanings are defined below.
         */
        "rel": | 'alternate'
    | 'appendix'
    | 'author'
    | 'bookmark'
    | 'chapter'
    | 'contents'
    | 'copyright'
    | 'glossary'
    | 'help'
    | 'index'
    | 'license'
    | 'next'
    | 'nofollow'
    | 'noopener'
    | 'noreferrer'
    | 'prefetch'
    | 'prev'
    | 'search'
    | 'section'
    | 'start'
    | 'subsection'
    | 'tag';
        /**
          * The target attribute gives the name of the browsing context that will be used. User agents use this name when following hyperlinks.
         */
        "target": '_blank' | '_self' | '_parent' | '_top';
        /**
          * The text attribute can be used to set the text inside the anchor tag without slot.
         */
        "text": string;
        /**
          * The type attribute, if present, gives the MIME type of the linked resource. The value must be a valid MIME type. User agents must not consider the type attribute authoritative — upon fetching the resource, user agents must not use metadata included in the link to the resource to determine its type.
         */
        "type": string;
    }
    interface DbLinklist {
        /**
          * The data attribute can be used to generate linklist by data.
         */
        "data"?: string;
    }
    interface DbLogo {
        /**
          * The size attribute specifies the size of the logo.
         */
        "size": 'xsmall' | 'small' | 'medium' | 'large' | 'xlarge';
    }
    interface DbMainnavigation {
        /**
          * The data attribute can be used to generate main navigation by data.
         */
        "data"?: string;
        /**
          * The site-name attribute can be set to have the site name for small screens.
         */
        "siteName"?: string;
    }
    interface DbMeta {
    }
    interface DbMetanavigation {
        /**
          * The data attribute can be used to generate metanavigation by data.
         */
        "data"?: string;
    }
    interface DbNotification {
        /**
          * The type attribute is used to set the type of the notification, will change styling accordingly.
         */
        "type": | 'error'
    | 'informative'
    | 'success'
    | 'warning';
        /**
          * Variant will be added to the element containing the alert or status message that will be read aloud by screen readers.
         */
        "variant": 'alert' | 'status';
    }
    interface DbNotifications {
        /**
          * The arialive attribute will interrupt the screenreader immediately and read out the notification if set to "assertive", while it will wait for the user's idleness when set to "polite"
         */
        "arialive": 'assertive' | 'polite';
        /**
          * Notifications have two variants ("hovering" and "alert") which change the styling.
         */
        "variant": 'alert' | 'hovering';
    }
    interface DbOverflowMenu {
        /**
          * The data attribute can be used to generate overflow-menu by data.
         */
        "data"?: string;
        /**
          * The opposite attribute, changes the behaviour: overflow-menu -> right.
         */
        "opposite": boolean;
        /**
          * The summary attribute, shows a text for accessibility.
         */
        "summary": string;
    }
    interface DbPage {
    }
    interface DbPagination {
        /**
          * Optional id for the caption aria label - otherwise random id will be set
         */
        "ariaid": string;
        /**
          * The arialabel attribute is a string attribute and defines the text content of the aria-label in the pagination.
         */
        "arialabel": string;
        /**
          * The count attribute is a number attribute and defines the number of pages displayed apart from the first and last page (except if currentpage is the first or last page, then these pages are included in the count).
         */
        "count": number;
        /**
          * The currentpage attribute is a obligatory number attribute and indicates which page number is highlighted in the pagination.
         */
        "currentpage": number;
        /**
          * The ellipsisend attribute only needs to be passed when working with slots. Should to be set to true if an ellipsis needs to be shown at the end of the pagination.
         */
        "ellipsisend": boolean;
        /**
          * The ellipsisstart attribute only needs to be passed when working with slots. Should to be set to true if an ellipsis needs to be shown at the start of the pagination.
         */
        "ellipsisstart": boolean;
        /**
          * The pages attribute is a obligatory number attribute and indicates how many pages the pagination knows about.
         */
        "pages": number;
        /**
          * The textnext attribute is a string attribute and defines the text content of the right arrow in the pagination.
         */
        "textnext": string;
        /**
          * The textprevious attribute is a string attribute and defines the text content of the left arrow in the pagination.
         */
        "textprevious": string;
        /**
          * The titlenext attribute is a string attribute and defines the title of the right arrow in the pagination.
         */
        "titlenext": string;
        /**
          * The titlepagination attribute is a string attribute and defines the title of each page number (except first and last) displayed in the pagination.
         */
        "titlepagination": string;
        /**
          * The titleprevious attribute is a string attribute and defines the title of the left arrow in the pagination.
         */
        "titleprevious": string;
    }
    interface DbProgress {
        /**
          * As a circle
         */
        "circle": boolean;
        /**
          * Optional id - otherwise random id will be provided
         */
        "htmlid": string;
        /**
          * Indeterminate
         */
        "indeterminate": boolean;
        /**
          * The currentValue of the progress indicator.
         */
        "max": number;
        /**
          * The percentage sign - default %.
         */
        "percentagesign": string;
        /**
          * The currentValue of the progress indicator.
         */
        "value": number;
    }
    interface DbRadio {
        /**
          * The autofocus content attribute allows the author to indicate that a control is to be focused as soon as the page is loaded, allowing the user to just start typing without having to manually focus the main control.
         */
        "autofocus": boolean;
        /**
          * The checked content attribute is a boolean attribute that gives the default checkedness of the input element.
         */
        "checked": boolean;
        /**
          * The disabled attribute can be set to keep a user from clicking on the input.
         */
        "disabled": boolean;
        /**
          * The input_id of a labelable form-related element in the same document as the label element. The first element in the document with an id matching the value of the for attribute is the labeled control for this label element, if it is a labelable element.
         */
        "input_id": string;
        /**
          * The label attribute specifies the caption of the input.
         */
        "label": string;
        /**
          * The name content attribute gives the name of the form control, as used in form submission and in the form element's elements object. If the attribute is specified, its value must not be the empty string.
         */
        "name": string;
        /**
          * The required attribute is a boolean attribute. When specified, the element is required.
         */
        "required": boolean;
        /**
          * The value content attribute gives the default value of the input element.
         */
        "value": string;
    }
    interface DbSelect {
        /**
          * The ariainvalid attribute is used to indicate that the value entered into an input field does not conform to the format expected by the application.
         */
        "ariainvalid": boolean;
        /**
          * The disabled attribute can be set to keep a user from clicking on the select.
         */
        "disabled": boolean;
        /**
          * The input_id of a labelable form-related element in the same document as the label element. The first element in the document with an id matching the value of the for attribute is the labeled control for this label element, if it is a labelable element.
         */
        "input_id": string;
        /**
          * The label attribute specifies the caption of the selectbox.
         */
        "label": string;
        /**
          * If the multiple attribute is present, then the select element represents a control for selecting zero or more options from the list of options. If the attribute is absent, then the select element represents a control for selecting a single option from the list of options.
         */
        "multiple": boolean;
        /**
          * The name attribute gives the name of the form control, as used in form submission and in the form element's elements object. If the attribute is specified, its value must not be the empty string.
         */
        "name": string;
        /**
          * When the required attribute specified, the user will be required to select a value before submitting the form.
         */
        "required": boolean;
        /**
          * The size attribute gives the number of options to show to the user. The size attribute, if specified, must have a value that is a valid non-negative integer greater than zero. If the multiple attribute is present, then the size attribute's default value is 4. If the multiple attribute is absent, then the size attribute's default value is 1.
         */
        "size": number;
        /**
          * The value property is to receive results from the native element. Use 'this.value' to process the expected value when onchange is used.
         */
        "value": string;
        /**
          * The variant attribute specifies a visual expression of a select.
         */
        "variant": | 'semitransparent'
    | 'white'
    | 'solid'
    | 'outline';
    }
    interface DbSidenavi {
        /**
          * The data attribute can be used to generate sidenav by data.
         */
        "data"?: string;
    }
    interface DbTab {
        /**
          * If the tab is checked/active.
         */
        "active": boolean;
        /**
          * The label of the tab, shown in the tab-bar.
         */
        "label": string;
        /**
          * The name of the tab bar, is required for grouping multiple tabs together. Otherwise content won't switch by clicking the tabs.
         */
        "name": string;
    }
    interface DbTabBar {
    }
    interface DbTable {
        /**
          * The align prop sets the data-align attribute on the thead element of the rendered table. Valid values are "left" (default), "center", "bottom"
         */
        "align"?: string;
        /**
          * The bodyalign prop sets the data-align attribute on the tbody element of the rendered table. Valid values are "left" (default), "center", "bottom"
         */
        "bodyalign"?: string;
        /**
          * The bodyverticalalign prop sets the data-vertical-align attribute on the tbody element of the rendered table. Valid values are "top" (default), "middle", "bottom"
         */
        "bodyverticalalign"?: string;
        /**
          * The border prop sets the data-border attribute on the table element of the rendered table. Valid values are "around", "horizontal"
         */
        "border"?: string;
        /**
          * The density prop sets the data-density attribute on the table element of the rendered table. Valid values are "small", "regular", "large"
         */
        "density"?: string;
        /**
          * The fontsize prop sets the the font size of the style attribute on the table element of the rendered table.
         */
        "fontsize"?: string;
        /**
          * The sticky prop sets the table header stickyness of the rendered table.
         */
        "sticky"?: string;
        /**
          * The stripes prop sets the the zebra stripes coloring of the rendered table.
         */
        "stripes"?: string;
        /**
          * The tabledata prop receives a stringified object of the type "TableDataType" and sets the initial value of the table. It can also be set as a property from the outside via JavaScript
         */
        "tabledata": string | object;
        /**
          * The verticalalign prop sets the data-vertical-align attribute on the thead element of the rendered table. Valid values are "top" (default), "middle", "bottom"
         */
        "verticalalign"?: string;
    }
    interface DbTag {
        /**
          * Attribute to add icon before tag.
         */
        "icon": string;
        /**
          * Attribute to add icon after tag.
         */
        "iconafter"?: string;
        /**
          * Attribute for changing the size of the tag.
         */
        "small": boolean;
        /**
          * Predefined variants to change background color and font color.
         */
        "variant": | 'informative'
    | 'success'
    | 'warning'
    | 'error'
    | 'track'
    | 'poi-essen-trinken'
    | 'poi-einkaufen'
    | 'poi-gesundheit'
    | 'poi-kunst-kultur'
    | 'poi-wissenswertes'
    | 'poi-freizeit'
    | 'poi-zivile-rel-einrichtungen'
    | 'poi-dienstleistungen'
    | 'poi-db-services-einrichtung'
    | 'poi-wegeleitung';
    }
    interface DbTextarea {
        /**
          * The ariainvalid attribute is used to indicate that the value entered into an input field does not conform to the format expected by the application.
         */
        "ariainvalid": | 'false'
    | 'grammar'
    | 'spelling'
    | 'true';
        /**
          * The ariarequired attribute can be applied to a form element, to indicate to an AT that it is required to complete the form.
         */
        "ariarequired": 'false' | 'true';
        /**
          * The autofocus content attribute allows the author to indicate that a control is to be focused as soon as the page is loaded, allowing the user to just start typing without having to manually focus the main control.
         */
        "autofocus": boolean;
        /**
          * The cols attribute specifies the expected maximum number of characters per line.
         */
        "cols": number;
        /**
          * The description attribute specifies the description/hint of the textarea.
         */
        "description": string;
        /**
          * The dirname attribute on a form control element enables the submission of the directionality of the element, and gives the name of the control that contains this value during form submission. If such an attribute is specified, its value must not be the empty string.
         */
        "dirname": string;
        /**
          * The disabled attribute can be set to keep a user from clicking on the input.
         */
        "disabled": boolean;
        /**
          * The input_id of a labelable form-related element in the same document as the label element. The first element in the document with an id matching the value of the for attribute is the labeled control for this label element, if it is a labelable element.
         */
        "input_id": string;
        /**
          * The label attribute specifies the caption of the input.
         */
        "label": string;
        /**
          * /* The maxlength attribute, controlled by a dirty value flag, declares a limit on the number of characters a user can input.
         */
        "maxlength": number;
        /**
          * /* The minlength attribute, when it applies, is a form control minlength attribute.
         */
        "minlength": number;
        /**
          * The name content attribute gives the name of the form control, as used in form submission and in the form element's elements object. If the attribute is specified, its value must not be the empty string.
         */
        "name": string;
        /**
          * The placeholder attribute represents a short hint (a word or short phrase) intended to aid the user with data entry.
         */
        "placeholder": string;
        /**
          * The readonly attribute controls whether or not the user can edit the form control.
         */
        "readonly": boolean;
        /**
          * The required attribute is a boolean attribute. When specified, the element is required.
         */
        "required": boolean;
        /**
          * The rows attribute specifies the number of lines to show.
         */
        "rows": number;
        /**
          * The value attribute reflects the changes to the textarea which are also emitted via event
         */
        "value": string;
        /**
          * The variant attribute specifies a visual expression of a select.
         */
        "variant": | 'semitransparent'
    | 'white'
    | 'solid'
    | 'outline';
        /**
          * The wrap attribute indicates how the control wraps text.
         */
        "wrap": 'soft' | 'hard' | 'off ';
    }
    interface DbToggle {
        /**
          * Checked property
         */
        "checked": boolean;
        /**
          * Disabled property
         */
        "disabled": boolean;
        /**
          * Optional id for the label - otherwise random id will be set
         */
        "htmlid": string;
        /**
          * The name attribute specifies a name for the included input element.
         */
        "name"?: string;
    }
    interface GithubVersionSwitcher {
        /**
          * Provides the owner of the repo
         */
        "owner": string;
        /**
          * Provides the name of the repo
         */
        "repo": string;
    }
}
export interface DbCheckboxCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDbCheckboxElement;
}
export interface DbInputCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDbInputElement;
}
export interface DbPaginationCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDbPaginationElement;
}
export interface DbRadioCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDbRadioElement;
}
export interface DbSelectCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDbSelectElement;
}
export interface DbTextareaCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDbTextareaElement;
}
export interface DbToggleCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDbToggleElement;
}
declare global {
    interface HTMLDbAccordionElement extends Components.DbAccordion, HTMLStencilElement {
    }
    var HTMLDbAccordionElement: {
        prototype: HTMLDbAccordionElement;
        new (): HTMLDbAccordionElement;
    };
    interface HTMLDbBrandElement extends Components.DbBrand, HTMLStencilElement {
    }
    var HTMLDbBrandElement: {
        prototype: HTMLDbBrandElement;
        new (): HTMLDbBrandElement;
    };
    interface HTMLDbBreadcrumbElement extends Components.DbBreadcrumb, HTMLStencilElement {
    }
    var HTMLDbBreadcrumbElement: {
        prototype: HTMLDbBreadcrumbElement;
        new (): HTMLDbBreadcrumbElement;
    };
    interface HTMLDbButtonElement extends Components.DbButton, HTMLStencilElement {
    }
    var HTMLDbButtonElement: {
        prototype: HTMLDbButtonElement;
        new (): HTMLDbButtonElement;
    };
    interface HTMLDbCardElement extends Components.DbCard, HTMLStencilElement {
    }
    var HTMLDbCardElement: {
        prototype: HTMLDbCardElement;
        new (): HTMLDbCardElement;
    };
    interface HTMLDbCardsElement extends Components.DbCards, HTMLStencilElement {
    }
    var HTMLDbCardsElement: {
        prototype: HTMLDbCardsElement;
        new (): HTMLDbCardsElement;
    };
    interface HTMLDbCheckboxElement extends Components.DbCheckbox, HTMLStencilElement {
    }
    var HTMLDbCheckboxElement: {
        prototype: HTMLDbCheckboxElement;
        new (): HTMLDbCheckboxElement;
    };
    interface HTMLDbChipElement extends Components.DbChip, HTMLStencilElement {
    }
    var HTMLDbChipElement: {
        prototype: HTMLDbChipElement;
        new (): HTMLDbChipElement;
    };
    interface HTMLDbDropdownElement extends Components.DbDropdown, HTMLStencilElement {
    }
    var HTMLDbDropdownElement: {
        prototype: HTMLDbDropdownElement;
        new (): HTMLDbDropdownElement;
    };
    interface HTMLDbFooterElement extends Components.DbFooter, HTMLStencilElement {
    }
    var HTMLDbFooterElement: {
        prototype: HTMLDbFooterElement;
        new (): HTMLDbFooterElement;
    };
    interface HTMLDbHeaderElement extends Components.DbHeader, HTMLStencilElement {
    }
    var HTMLDbHeaderElement: {
        prototype: HTMLDbHeaderElement;
        new (): HTMLDbHeaderElement;
    };
    interface HTMLDbHeadlineElement extends Components.DbHeadline, HTMLStencilElement {
    }
    var HTMLDbHeadlineElement: {
        prototype: HTMLDbHeadlineElement;
        new (): HTMLDbHeadlineElement;
    };
    interface HTMLDbIconElement extends Components.DbIcon, HTMLStencilElement {
    }
    var HTMLDbIconElement: {
        prototype: HTMLDbIconElement;
        new (): HTMLDbIconElement;
    };
    interface HTMLDbImageElement extends Components.DbImage, HTMLStencilElement {
    }
    var HTMLDbImageElement: {
        prototype: HTMLDbImageElement;
        new (): HTMLDbImageElement;
    };
    interface HTMLDbInputElement extends Components.DbInput, HTMLStencilElement {
    }
    var HTMLDbInputElement: {
        prototype: HTMLDbInputElement;
        new (): HTMLDbInputElement;
    };
    interface HTMLDbLanguageSwitcherElement extends Components.DbLanguageSwitcher, HTMLStencilElement {
    }
    var HTMLDbLanguageSwitcherElement: {
        prototype: HTMLDbLanguageSwitcherElement;
        new (): HTMLDbLanguageSwitcherElement;
    };
    interface HTMLDbLinkElement extends Components.DbLink, HTMLStencilElement {
    }
    var HTMLDbLinkElement: {
        prototype: HTMLDbLinkElement;
        new (): HTMLDbLinkElement;
    };
    interface HTMLDbLinklistElement extends Components.DbLinklist, HTMLStencilElement {
    }
    var HTMLDbLinklistElement: {
        prototype: HTMLDbLinklistElement;
        new (): HTMLDbLinklistElement;
    };
    interface HTMLDbLogoElement extends Components.DbLogo, HTMLStencilElement {
    }
    var HTMLDbLogoElement: {
        prototype: HTMLDbLogoElement;
        new (): HTMLDbLogoElement;
    };
    interface HTMLDbMainnavigationElement extends Components.DbMainnavigation, HTMLStencilElement {
    }
    var HTMLDbMainnavigationElement: {
        prototype: HTMLDbMainnavigationElement;
        new (): HTMLDbMainnavigationElement;
    };
    interface HTMLDbMetaElement extends Components.DbMeta, HTMLStencilElement {
    }
    var HTMLDbMetaElement: {
        prototype: HTMLDbMetaElement;
        new (): HTMLDbMetaElement;
    };
    interface HTMLDbMetanavigationElement extends Components.DbMetanavigation, HTMLStencilElement {
    }
    var HTMLDbMetanavigationElement: {
        prototype: HTMLDbMetanavigationElement;
        new (): HTMLDbMetanavigationElement;
    };
    interface HTMLDbNotificationElement extends Components.DbNotification, HTMLStencilElement {
    }
    var HTMLDbNotificationElement: {
        prototype: HTMLDbNotificationElement;
        new (): HTMLDbNotificationElement;
    };
    interface HTMLDbNotificationsElement extends Components.DbNotifications, HTMLStencilElement {
    }
    var HTMLDbNotificationsElement: {
        prototype: HTMLDbNotificationsElement;
        new (): HTMLDbNotificationsElement;
    };
    interface HTMLDbOverflowMenuElement extends Components.DbOverflowMenu, HTMLStencilElement {
    }
    var HTMLDbOverflowMenuElement: {
        prototype: HTMLDbOverflowMenuElement;
        new (): HTMLDbOverflowMenuElement;
    };
    interface HTMLDbPageElement extends Components.DbPage, HTMLStencilElement {
    }
    var HTMLDbPageElement: {
        prototype: HTMLDbPageElement;
        new (): HTMLDbPageElement;
    };
    interface HTMLDbPaginationElement extends Components.DbPagination, HTMLStencilElement {
    }
    var HTMLDbPaginationElement: {
        prototype: HTMLDbPaginationElement;
        new (): HTMLDbPaginationElement;
    };
    interface HTMLDbProgressElement extends Components.DbProgress, HTMLStencilElement {
    }
    var HTMLDbProgressElement: {
        prototype: HTMLDbProgressElement;
        new (): HTMLDbProgressElement;
    };
    interface HTMLDbRadioElement extends Components.DbRadio, HTMLStencilElement {
    }
    var HTMLDbRadioElement: {
        prototype: HTMLDbRadioElement;
        new (): HTMLDbRadioElement;
    };
    interface HTMLDbSelectElement extends Components.DbSelect, HTMLStencilElement {
    }
    var HTMLDbSelectElement: {
        prototype: HTMLDbSelectElement;
        new (): HTMLDbSelectElement;
    };
    interface HTMLDbSidenaviElement extends Components.DbSidenavi, HTMLStencilElement {
    }
    var HTMLDbSidenaviElement: {
        prototype: HTMLDbSidenaviElement;
        new (): HTMLDbSidenaviElement;
    };
    interface HTMLDbTabElement extends Components.DbTab, HTMLStencilElement {
    }
    var HTMLDbTabElement: {
        prototype: HTMLDbTabElement;
        new (): HTMLDbTabElement;
    };
    interface HTMLDbTabBarElement extends Components.DbTabBar, HTMLStencilElement {
    }
    var HTMLDbTabBarElement: {
        prototype: HTMLDbTabBarElement;
        new (): HTMLDbTabBarElement;
    };
    interface HTMLDbTableElement extends Components.DbTable, HTMLStencilElement {
    }
    var HTMLDbTableElement: {
        prototype: HTMLDbTableElement;
        new (): HTMLDbTableElement;
    };
    interface HTMLDbTagElement extends Components.DbTag, HTMLStencilElement {
    }
    var HTMLDbTagElement: {
        prototype: HTMLDbTagElement;
        new (): HTMLDbTagElement;
    };
    interface HTMLDbTextareaElement extends Components.DbTextarea, HTMLStencilElement {
    }
    var HTMLDbTextareaElement: {
        prototype: HTMLDbTextareaElement;
        new (): HTMLDbTextareaElement;
    };
    interface HTMLDbToggleElement extends Components.DbToggle, HTMLStencilElement {
    }
    var HTMLDbToggleElement: {
        prototype: HTMLDbToggleElement;
        new (): HTMLDbToggleElement;
    };
    interface HTMLGithubVersionSwitcherElement extends Components.GithubVersionSwitcher, HTMLStencilElement {
    }
    var HTMLGithubVersionSwitcherElement: {
        prototype: HTMLGithubVersionSwitcherElement;
        new (): HTMLGithubVersionSwitcherElement;
    };
    interface HTMLElementTagNameMap {
        "db-accordion": HTMLDbAccordionElement;
        "db-brand": HTMLDbBrandElement;
        "db-breadcrumb": HTMLDbBreadcrumbElement;
        "db-button": HTMLDbButtonElement;
        "db-card": HTMLDbCardElement;
        "db-cards": HTMLDbCardsElement;
        "db-checkbox": HTMLDbCheckboxElement;
        "db-chip": HTMLDbChipElement;
        "db-dropdown": HTMLDbDropdownElement;
        "db-footer": HTMLDbFooterElement;
        "db-header": HTMLDbHeaderElement;
        "db-headline": HTMLDbHeadlineElement;
        "db-icon": HTMLDbIconElement;
        "db-image": HTMLDbImageElement;
        "db-input": HTMLDbInputElement;
        "db-language-switcher": HTMLDbLanguageSwitcherElement;
        "db-link": HTMLDbLinkElement;
        "db-linklist": HTMLDbLinklistElement;
        "db-logo": HTMLDbLogoElement;
        "db-mainnavigation": HTMLDbMainnavigationElement;
        "db-meta": HTMLDbMetaElement;
        "db-metanavigation": HTMLDbMetanavigationElement;
        "db-notification": HTMLDbNotificationElement;
        "db-notifications": HTMLDbNotificationsElement;
        "db-overflow-menu": HTMLDbOverflowMenuElement;
        "db-page": HTMLDbPageElement;
        "db-pagination": HTMLDbPaginationElement;
        "db-progress": HTMLDbProgressElement;
        "db-radio": HTMLDbRadioElement;
        "db-select": HTMLDbSelectElement;
        "db-sidenavi": HTMLDbSidenaviElement;
        "db-tab": HTMLDbTabElement;
        "db-tab-bar": HTMLDbTabBarElement;
        "db-table": HTMLDbTableElement;
        "db-tag": HTMLDbTagElement;
        "db-textarea": HTMLDbTextareaElement;
        "db-toggle": HTMLDbToggleElement;
        "github-version-switcher": HTMLGithubVersionSwitcherElement;
    }
}
declare namespace LocalJSX {
    interface DbAccordion {
        /**
          * The emphasis to highlight the summary.
         */
        "emphasis"?: boolean;
        /**
          * The emphasis to highlight the summary.
         */
        "open"?: boolean;
        /**
          * The size increase the size of the summary.
         */
        "size"?: 'small' | 'regular' | 'large';
        /**
          * The summary which shows the text which is visible when the accordion is collapsed.
         */
        "summary": string;
    }
    interface DbBrand {
        /**
          * The alt attribute can be set to define the alternative text for the DB logo.
         */
        "alt"?: string;
        /**
          * The href attribute can be set to reload the current application, in general you would go to the base path of your app.
         */
        "anchorRef"?: string;
        /**
          * The rel attribute can be set to make a relationship to the current URL(https://developer.mozilla.org/en-US/docs/web/api/htmlanchorelement/rel).
         */
        "anchorRelation"?: string;
        /**
          * The title attribute can be set to show a hint while hovering over the brand.
         */
        "anchorTitle"?: string;
        /**
          * The site-name-link attribute can be set to make the siteName clickable (set url to root) as well.
         */
        "siteNameLink"?: boolean;
        /**
          * The src attribute can be set to define another path for the DB logo.
         */
        "src"?: string;
    }
    interface DbBreadcrumb {
        /**
          * an optional [`aria-label`-attribute](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-label)
         */
        "arialabel"?: string;
        /**
          * The data attribute can be used to generate breadcrumb by data.
         */
        "data"?: string;
    }
    interface DbButton {
        /**
          * If the button controls a grouping of other elements, the ariaexpanded state indicates whether the controlled grouping is currently expanded or collapsed.
         */
        "ariaexpanded"?: 'true' | 'false';
        /**
          * Defines the button as a toggle button. The value of aria-pressed describes the state of the button.
         */
        "ariapressed"?: 'true' | 'false';
        /**
          * The disabled attribute can be set to keep a user from clicking on the button.
         */
        "disabled"?: boolean;
        /**
          * The formaction attribute specifies where to send the form-data when a form is submitted. Only for type="submit".
         */
        "formaction"?: string;
        /**
          * The formenctype attribute specifies how form-data should be encoded before sending it to a server. Only for type="submit".
         */
        "formenctype"?: string;
        /**
          * The formmethod attribute specifies how to send the form-data (which HTTP method to use). Only for type="submit".
         */
        "formmethod"?: 'get' | 'post';
        /**
          * The formnovalidate attribute specifies which that the form-data should not be validated on submission. Only for type="submit".
         */
        "formnovalidate"?: boolean;
        /**
          * The formtarget attribute specifies where to display the response after submitting the form. Only for type="submit".
         */
        "formtarget"?: '_self' | '_blank' | '_parent' | '_top';
        /**
          * Define an icon by it's identifier (like e.g. _download_, compare to [DB UI Icons](https://db-ui.github.io/core/patterns/base-icons/index.html)) to get displayed in front of the elements content.
         */
        "icon"?: string;
        /**
          * Define an icon by it's identifier (like e.g. _download_, compare to [DB UI Icons](https://db-ui.github.io/core/patterns/base-icons/index.html)) to get displayed behind the elements content.
         */
        "iconafter"?: string;
        /**
          * Define the text next to the icon specified via the icon Property to get hidden.
         */
        "icononly"?: boolean;
        /**
          * The name attribute specifies a name for the button.
         */
        "name"?: string;
        /**
          * The size attribute specifies the button size out of three sizes.
         */
        "size"?: 'small' | 'regular' | 'large';
        /**
          * The tooltip attribute specifies the title of button.
         */
        "tooltip"?: string;
        /**
          * The type attribute specifies the type of button.
         */
        "type"?: 'button' | 'reset' | 'submit';
        /**
          * The value attribute specifies an initial value for the button.
         */
        "value"?: string;
        /**
          * The variant attribute specifies a visual expression of button.
         */
        "variant"?: | 'primary'
    | 'secondary-outline'
    | 'secondary-solid'
    | 'tertiary-plain'
    | 'brand-primary';
    }
    interface DbCard {
        /**
          * The alt attribute for the image.
         */
        "alt"?: string;
        /**
          * The content represents the content of the card. It's optional and you can use slot for custom tags.
         */
        "content"?: string;
        /**
          * The header represents the title of the card. It's optional and you can use slot for custom tags.
         */
        "header"?: string;
        /**
          * The illustration which will show a predefined svg. -Development: enum can be generated with /scripts/illustration-generator-
         */
        "illustration"?: | 'alarm-clock'
    | 'bicycle'
    | 'blizzard'
    | 'broken'
    | 'buggy'
    | 'bus'
    | 'calendar'
    | 'car'
    | 'chat'
    | 'christmas'
    | 'clock-moving'
    | 'coffee-cup'
    | 'compass'
    | 'construction-sign'
    | 'construction-worker'
    | 'customer-feedback'
    | 'db-clock'
    | 'db-comfort-checkin'
    | 'db-ticket-shop'
    | 'db-ticket-vending-machine'
    | 'db-trainstation-with-train'
    | 'db-trainstation'
    | 'db-travel-center'
    | 'db-video-travel-center'
    | 'delayed'
    | 'der-kleine-ice'
    | 'diamond'
    | 'disruptions'
    | 'distance'
    | 'error'
    | 'ffp2-mask-with-sign'
    | 'ffp2-mask'
    | 'fokus'
    | 'gaming-no-wire'
    | 'gaming'
    | 'green-energy'
    | 'green'
    | 'handshake'
    | 'handwashing'
    | 'hashtag'
    | 'heart'
    | 'home'
    | 'information'
    | 'itinerary'
    | 'kiosk'
    | 'laptop'
    | 'local-train'
    | 'location'
    | 'lost-and-found'
    | 'luggage'
    | 'mask'
    | 'mini-store'
    | 'mobileticket-brand'
    | 'mobileticket-feature'
    | 'movie'
    | 'news'
    | 'newsletter'
    | 'newspaper'
    | 'no-handshaking'
    | 'onlineshop-brand'
    | 'onlineshop-feature'
    | 'onlineticket-brand'
    | 'onlineticket-feature'
    | 'passenger-rights'
    | 'podcast'
    | 'poi-berlin-copy'
    | 'poi-berlin'
    | 'restaurant'
    | 'savings'
    | 'scan-ticket-printout'
    | 'search'
    | 'self-driving'
    | 'show-ticket'
    | 'single-entry'
    | 'smartphone'
    | 'sport'
    | 'suitcase'
    | 'tablet'
    | 'thunderstorm'
    | 'tickets'
    | 'timetable'
    | 'tips'
    | 'transportation-advertising'
    | 'whats-schmutzig'
    | 'wifi';
        /**
          * The prop image can be used instead of illustration to show a custom img.
         */
        "image"?: string;
        /**
          * The illustration-path defines the path to DB UI Core illustrations. If you want to use other/custom images use the image prop instead.
         */
        "uiCoreIllustrationPath"?: string;
        /**
          * The variant which is banner or title.
         */
        "variant"?: 'banner' | 'title';
    }
    interface DbCards {
    }
    interface DbCheckbox {
        /**
          * The autofocus content attribute allows the author to indicate that a control is to be focused as soon as the page is loaded, allowing the user to just start typing without having to manually focus the main control.
         */
        "autofocus"?: boolean;
        /**
          * The checked content attribute is a boolean attribute that gives the default checkedness of the input element.
         */
        "checked"?: boolean;
        /**
          * The disabled attribute can be set to keep a user from clicking on the input.
         */
        "disabled"?: boolean;
        /**
          * The indeterminate attribute is a boolean attribute. When specified, the element is is displayed in an indeterminate state (neither checked, nor unchecked).
         */
        "indeterminate"?: boolean;
        /**
          * The input_id of a labelable form-related element in the same document as the label element. The first element in the document with an id matching the value of the for attribute is the labeled control for this label element, if it is a labelable element.
         */
        "input_id"?: string;
        /**
          * The label attribute specifies the caption of the input.
         */
        "label": string;
        /**
          * The name content attribute gives the name of the form control, as used in form submission and in the form element's elements object. If the attribute is specified, its value must not be the empty string.
         */
        "name": string;
        /**
          * Mapping for default change Event
         */
        "onDbChange"?: (event: DbCheckboxCustomEvent<any>) => void;
        /**
          * The required attribute is a boolean attribute. When specified, the element is required.
         */
        "required"?: boolean;
        /**
          * The value content attribute gives the default value of the input element.
         */
        "value"?: string;
    }
    interface DbChip {
        /**
          * The disabled attribute can be set to keep a user from clicking on the chip.
         */
        "disabled"?: boolean;
        /**
          * Attribute to add icon before chip.
         */
        "icon"?: string;
        /**
          * Attribute to add icon after chip.
         */
        "iconafter"?: string;
        /**
          * The input_id of a label form-related element in the same document as the label element. The first element in the document with an id matching the value of the for attribute is the labeled control for this label element, if it is a label element.
         */
        "input_id"?: string;
        /**
          * Decides which interactiontype you want to use: filter (1-n); selection (1);
         */
        "interactiontype"?: 'filter' | 'selection';
        /**
          * Name to group multiple chips.
         */
        "name"?: string;
        /**
          * Selected state
         */
        "selected"?: boolean;
        /**
          * Predefined variants to change background color and font color.
         */
        "variant"?: | 'informative'
    | 'success'
    | 'warning'
    | 'error'
    | 'track'
    | 'poi-essen-trinken'
    | 'poi-einkaufen'
    | 'poi-gesundheit'
    | 'poi-kunst-kultur'
    | 'poi-wissenswertes'
    | 'poi-freizeit'
    | 'poi-zivile-rel-einrichtungen'
    | 'poi-dienstleistungen'
    | 'poi-db-services-einrichtung'
    | 'poi-wegeleitung';
    }
    interface DbDropdown {
        /**
          * The data attribute can be used to generate dropdown by data.
         */
        "data"?: string;
        /**
          * The opposite attribute, changes the behaviour: dropdown -> left.
         */
        "opposite"?: boolean;
        /**
          * The summary attribute, shows a text for accessibility.
         */
        "summary"?: string;
    }
    interface DbFooter {
        /**
          * The border attribute can be set to add a border on top of the footer.
         */
        "border"?: boolean;
        /**
          * The copyright attribute can be set to enable a copyright string with current year.
         */
        "copyright"?: boolean;
    }
    interface DbHeader {
    }
    interface DbHeadline {
        /**
          * The pulse attribute determines whether to add a visual DB Pulse to the headline.
         */
        "pulse"?: boolean;
        /**
          * The variant attribute specifies the size of the headline.
         */
        "variant"?: '1' | '2' | '3' | '4' | '5' | '6';
    }
    interface DbIcon {
        /**
          * The icon attribute specifies the icon to use.
         */
        "icon": string;
        /**
          * The variant attribute specifies the style and size of an icon.
         */
        "variant"?: | '16-filled'
    | '20-filled'
    | '24-filled'
    | '32-filled'
    | '48-filled'
    | '64-filled'
    | '16-outline'
    | '20-outline'
    | '24-outline'
    | '32-outline'
    | '48-outline'
    | '64-outline';
    }
    interface DbImage {
        /**
          * The alt attribute is used by "screen reader" software so that a person who is listening to the content of a webpage (for instance, a person who is blind) can interact with this element.
         */
        "alt": string;
        /**
          * Optional id for the caption aria label - otherwise random id will be set
         */
        "ariaid"?: string;
        /**
          * Optional caption for the image
         */
        "caption"?: string;
        /**
          * Height for the image
         */
        "height": number;
        /**
          * Optional lazy loading attribute
         */
        "loading"?: 'lazy';
        /**
          * Optional modern image format srcset URL (like avif or webp).
         */
        "modernformat"?: string;
        /**
          * Optional responsive media queries as array of objects '[{srcset:"/path/to/picture.extension", media:"(min-width: 768px)"}]'
         */
        "responsivemediaquery"?: string;
        /**
          * The image src URL.
         */
        "src": string;
        /**
          * Optional srcset for high density images
         */
        "srcset"?: string;
        /**
          * Width for the image
         */
        "width": number;
    }
    interface DbInput {
        /**
          * The ariainvalid attribute is used to indicate that the value entered into an input field does not conform to the format expected by the application.
         */
        "ariainvalid"?: | 'false'
    | 'grammar'
    | 'spelling'
    | 'true';
        /**
          * The ariarequired attribute can be applied to a form element, to indicate to an AT that it is required to complete the form.
         */
        "ariarequired"?: 'false' | 'true';
        /**
          * User agents sometimes have features for helping users fill forms in, for example prefilling the user's address based on earlier user input.
         */
        "autocomplete"?: 'off' | 'on';
        /**
          * The autofocus content attribute allows the author to indicate that a control is to be focused as soon as the page is loaded, allowing the user to just start typing without having to manually focus the main control.
         */
        "autofocus"?: boolean;
        /**
          * The description attribute specifies the description/hint of the input.
         */
        "description"?: string;
        /**
          * The dirname attribute on a form control element enables the submission of the directionality of the element, and gives the name of the control that contains this value during form submission. If such an attribute is specified, its value must not be the empty string.
         */
        "dirname"?: string;
        /**
          * The disabled attribute can be set to keep a user from clicking on the input.
         */
        "disabled"?: boolean;
        /**
          * The input_id of a labelable form-related element in the same document as the label element. The first element in the document with an id matching the value of the for attribute is the labeled control for this label element, if it is a labelable element.
         */
        "input_id"?: string;
        /**
          * The label attribute specifies the caption of the input.
         */
        "label": string;
        /**
          * The list attribute is used to identify an element that lists predefined options suggested to the user.
         */
        "list"?: string;
        /**
          * The max attribute specifies the maximum value that is sufficient for this input.
         */
        "max"?: number;
        /**
          * /* The maxlength attribute, controlled by a dirty value flag, declares a limit on the number of characters a user can input.
         */
        "maxlength"?: number;
        /**
          * The min attribute specifies the minimum value that is sufficient for this input.
         */
        "min"?: number;
        /**
          * /* The minlength attribute, when it applies, is a form control minlength attribute.
         */
        "minlength"?: number;
        /**
          * The name content attribute gives the name of the form control, as used in form submission and in the form element's elements object. If the attribute is specified, its value must not be the empty string.
         */
        "name"?: string;
        /**
          * Mapping for default change Event
         */
        "onDbChange"?: (event: DbInputCustomEvent<any>) => void;
        /**
          * The pattern attribute specifies a regular expression against which the control's value is to be checked.
         */
        "pattern"?: string;
        /**
          * The placeholder attribute represents a short hint (a word or short phrase) intended to aid the user with data entry.
         */
        "placeholder"?: string;
        /**
          * The readonly attribute controls whether or not the user can edit the form control.
         */
        "readonly"?: boolean;
        /**
          * The required attribute is a boolean attribute. When specified, the element is required.
         */
        "required"?: boolean;
        /**
          * The size attribute gives the number of characters that, in a visual rendering, the user agent is to allow the user to see while editing the element's value.
         */
        "size"?: number;
        /**
          * The step attribute specifies the granularity that the value must obey to on increasing or decreasing by the users selection.
         */
        "step"?: number;
        /**
          * The type attribute changes the input type to text, number etc.
         */
        "type"?: string;
        /**
          * The value content attribute gives the default value of the input element.
         */
        "value"?: string;
        /**
          * The variant attribute specifies a visual expression of a select.
         */
        "variant"?: | 'semitransparent'
    | 'white'
    | 'solid'
    | 'outline';
    }
    interface DbLanguageSwitcher {
        /**
          * The aria-selected-index shows the link as selected which has the given index.
         */
        "ariaSelectedIndex"?: number;
        /**
          * The data attribute can be used to generate linklist by data.
         */
        "data"?: string;
    }
    interface DbLink {
        /**
          * The current attribute is the state on an element indicates that this element represents the current item within a container or set of related elements.
         */
        "current"?: | 'page'
    | 'step'
    | 'location'
    | 'date'
    | 'time'
    | 'true'
    | 'false';
        /**
          * The href attribute represents a hyperlink (a hypertext anchor).
         */
        "href"?: string;
        /**
          * The hreflang attribute gives the language of the linked resource. The value must be a valid BCP 47 language tag.
         */
        "hreflang"?: string;
        /**
          * Define an icon by it's identifier (like e.g. _download_, compare to [DB UI Icons](https://db-ui.github.io/core/patterns/base-icons/index.html)) to get displayed in front of the elements content.
         */
        "icon"?: string;
        /**
          * The variant attribute specifies the style and size of an icon.
         */
        "iconVariant"?: | '16-filled'
    | '20-filled'
    | '24-filled'
    | '32-filled'
    | '48-filled'
    | '64-filled'
    | '16-outline'
    | '20-outline'
    | '24-outline'
    | '32-outline'
    | '48-outline'
    | '64-outline';
        /**
          * Define the text next to the icon specified via the icon Property to get hidden.
         */
        "icononly"?: boolean;
        /**
          * The media attribute describes for which media the target document was designed. The value must be a valid media query. The default, if the media attribute is omitted, is "all".
         */
        "media"?: string;
        /**
          * The rel attribute controls what kinds of links the elements create. The attribue's value must be a set of space-separated tokens. The allowed keywords and their meanings are defined below.
         */
        "rel"?: | 'alternate'
    | 'appendix'
    | 'author'
    | 'bookmark'
    | 'chapter'
    | 'contents'
    | 'copyright'
    | 'glossary'
    | 'help'
    | 'index'
    | 'license'
    | 'next'
    | 'nofollow'
    | 'noopener'
    | 'noreferrer'
    | 'prefetch'
    | 'prev'
    | 'search'
    | 'section'
    | 'start'
    | 'subsection'
    | 'tag';
        /**
          * The target attribute gives the name of the browsing context that will be used. User agents use this name when following hyperlinks.
         */
        "target"?: '_blank' | '_self' | '_parent' | '_top';
        /**
          * The text attribute can be used to set the text inside the anchor tag without slot.
         */
        "text"?: string;
        /**
          * The type attribute, if present, gives the MIME type of the linked resource. The value must be a valid MIME type. User agents must not consider the type attribute authoritative — upon fetching the resource, user agents must not use metadata included in the link to the resource to determine its type.
         */
        "type"?: string;
    }
    interface DbLinklist {
        /**
          * The data attribute can be used to generate linklist by data.
         */
        "data"?: string;
    }
    interface DbLogo {
        /**
          * The size attribute specifies the size of the logo.
         */
        "size"?: 'xsmall' | 'small' | 'medium' | 'large' | 'xlarge';
    }
    interface DbMainnavigation {
        /**
          * The data attribute can be used to generate main navigation by data.
         */
        "data"?: string;
        /**
          * The site-name attribute can be set to have the site name for small screens.
         */
        "siteName"?: string;
    }
    interface DbMeta {
    }
    interface DbMetanavigation {
        /**
          * The data attribute can be used to generate metanavigation by data.
         */
        "data"?: string;
    }
    interface DbNotification {
        /**
          * The type attribute is used to set the type of the notification, will change styling accordingly.
         */
        "type"?: | 'error'
    | 'informative'
    | 'success'
    | 'warning';
        /**
          * Variant will be added to the element containing the alert or status message that will be read aloud by screen readers.
         */
        "variant"?: 'alert' | 'status';
    }
    interface DbNotifications {
        /**
          * The arialive attribute will interrupt the screenreader immediately and read out the notification if set to "assertive", while it will wait for the user's idleness when set to "polite"
         */
        "arialive"?: 'assertive' | 'polite';
        /**
          * Notifications have two variants ("hovering" and "alert") which change the styling.
         */
        "variant"?: 'alert' | 'hovering';
    }
    interface DbOverflowMenu {
        /**
          * The data attribute can be used to generate overflow-menu by data.
         */
        "data"?: string;
        /**
          * The opposite attribute, changes the behaviour: overflow-menu -> right.
         */
        "opposite"?: boolean;
        /**
          * The summary attribute, shows a text for accessibility.
         */
        "summary"?: string;
    }
    interface DbPage {
    }
    interface DbPagination {
        /**
          * Optional id for the caption aria label - otherwise random id will be set
         */
        "ariaid"?: string;
        /**
          * The arialabel attribute is a string attribute and defines the text content of the aria-label in the pagination.
         */
        "arialabel"?: string;
        /**
          * The count attribute is a number attribute and defines the number of pages displayed apart from the first and last page (except if currentpage is the first or last page, then these pages are included in the count).
         */
        "count"?: number;
        /**
          * The currentpage attribute is a obligatory number attribute and indicates which page number is highlighted in the pagination.
         */
        "currentpage"?: number;
        /**
          * The ellipsisend attribute only needs to be passed when working with slots. Should to be set to true if an ellipsis needs to be shown at the end of the pagination.
         */
        "ellipsisend"?: boolean;
        /**
          * The ellipsisstart attribute only needs to be passed when working with slots. Should to be set to true if an ellipsis needs to be shown at the start of the pagination.
         */
        "ellipsisstart"?: boolean;
        /**
          * Mapping for default change Event
         */
        "onDbChange"?: (event: DbPaginationCustomEvent<any>) => void;
        /**
          * The pages attribute is a obligatory number attribute and indicates how many pages the pagination knows about.
         */
        "pages"?: number;
        /**
          * The textnext attribute is a string attribute and defines the text content of the right arrow in the pagination.
         */
        "textnext"?: string;
        /**
          * The textprevious attribute is a string attribute and defines the text content of the left arrow in the pagination.
         */
        "textprevious"?: string;
        /**
          * The titlenext attribute is a string attribute and defines the title of the right arrow in the pagination.
         */
        "titlenext"?: string;
        /**
          * The titlepagination attribute is a string attribute and defines the title of each page number (except first and last) displayed in the pagination.
         */
        "titlepagination"?: string;
        /**
          * The titleprevious attribute is a string attribute and defines the title of the left arrow in the pagination.
         */
        "titleprevious"?: string;
    }
    interface DbProgress {
        /**
          * As a circle
         */
        "circle"?: boolean;
        /**
          * Optional id - otherwise random id will be provided
         */
        "htmlid"?: string;
        /**
          * Indeterminate
         */
        "indeterminate"?: boolean;
        /**
          * The currentValue of the progress indicator.
         */
        "max"?: number;
        /**
          * The percentage sign - default %.
         */
        "percentagesign"?: string;
        /**
          * The currentValue of the progress indicator.
         */
        "value"?: number;
    }
    interface DbRadio {
        /**
          * The autofocus content attribute allows the author to indicate that a control is to be focused as soon as the page is loaded, allowing the user to just start typing without having to manually focus the main control.
         */
        "autofocus"?: boolean;
        /**
          * The checked content attribute is a boolean attribute that gives the default checkedness of the input element.
         */
        "checked"?: boolean;
        /**
          * The disabled attribute can be set to keep a user from clicking on the input.
         */
        "disabled"?: boolean;
        /**
          * The input_id of a labelable form-related element in the same document as the label element. The first element in the document with an id matching the value of the for attribute is the labeled control for this label element, if it is a labelable element.
         */
        "input_id"?: string;
        /**
          * The label attribute specifies the caption of the input.
         */
        "label": string;
        /**
          * The name content attribute gives the name of the form control, as used in form submission and in the form element's elements object. If the attribute is specified, its value must not be the empty string.
         */
        "name": string;
        /**
          * Mapping for default change Event
         */
        "onDbChange"?: (event: DbRadioCustomEvent<any>) => void;
        /**
          * The required attribute is a boolean attribute. When specified, the element is required.
         */
        "required"?: boolean;
        /**
          * The value content attribute gives the default value of the input element.
         */
        "value"?: string;
    }
    interface DbSelect {
        /**
          * The ariainvalid attribute is used to indicate that the value entered into an input field does not conform to the format expected by the application.
         */
        "ariainvalid"?: boolean;
        /**
          * The disabled attribute can be set to keep a user from clicking on the select.
         */
        "disabled"?: boolean;
        /**
          * The input_id of a labelable form-related element in the same document as the label element. The first element in the document with an id matching the value of the for attribute is the labeled control for this label element, if it is a labelable element.
         */
        "input_id"?: string;
        /**
          * The label attribute specifies the caption of the selectbox.
         */
        "label": string;
        /**
          * If the multiple attribute is present, then the select element represents a control for selecting zero or more options from the list of options. If the attribute is absent, then the select element represents a control for selecting a single option from the list of options.
         */
        "multiple"?: boolean;
        /**
          * The name attribute gives the name of the form control, as used in form submission and in the form element's elements object. If the attribute is specified, its value must not be the empty string.
         */
        "name": string;
        /**
          * Mapping for default change Event
         */
        "onDbChange"?: (event: DbSelectCustomEvent<any>) => void;
        /**
          * When the required attribute specified, the user will be required to select a value before submitting the form.
         */
        "required"?: boolean;
        /**
          * The size attribute gives the number of options to show to the user. The size attribute, if specified, must have a value that is a valid non-negative integer greater than zero. If the multiple attribute is present, then the size attribute's default value is 4. If the multiple attribute is absent, then the size attribute's default value is 1.
         */
        "size"?: number;
        /**
          * The value property is to receive results from the native element. Use 'this.value' to process the expected value when onchange is used.
         */
        "value"?: string;
        /**
          * The variant attribute specifies a visual expression of a select.
         */
        "variant"?: | 'semitransparent'
    | 'white'
    | 'solid'
    | 'outline';
    }
    interface DbSidenavi {
        /**
          * The data attribute can be used to generate sidenav by data.
         */
        "data"?: string;
    }
    interface DbTab {
        /**
          * If the tab is checked/active.
         */
        "active"?: boolean;
        /**
          * The label of the tab, shown in the tab-bar.
         */
        "label"?: string;
        /**
          * The name of the tab bar, is required for grouping multiple tabs together. Otherwise content won't switch by clicking the tabs.
         */
        "name"?: string;
    }
    interface DbTabBar {
    }
    interface DbTable {
        /**
          * The align prop sets the data-align attribute on the thead element of the rendered table. Valid values are "left" (default), "center", "bottom"
         */
        "align"?: string;
        /**
          * The bodyalign prop sets the data-align attribute on the tbody element of the rendered table. Valid values are "left" (default), "center", "bottom"
         */
        "bodyalign"?: string;
        /**
          * The bodyverticalalign prop sets the data-vertical-align attribute on the tbody element of the rendered table. Valid values are "top" (default), "middle", "bottom"
         */
        "bodyverticalalign"?: string;
        /**
          * The border prop sets the data-border attribute on the table element of the rendered table. Valid values are "around", "horizontal"
         */
        "border"?: string;
        /**
          * The density prop sets the data-density attribute on the table element of the rendered table. Valid values are "small", "regular", "large"
         */
        "density"?: string;
        /**
          * The fontsize prop sets the the font size of the style attribute on the table element of the rendered table.
         */
        "fontsize"?: string;
        /**
          * The sticky prop sets the table header stickyness of the rendered table.
         */
        "sticky"?: string;
        /**
          * The stripes prop sets the the zebra stripes coloring of the rendered table.
         */
        "stripes"?: string;
        /**
          * The tabledata prop receives a stringified object of the type "TableDataType" and sets the initial value of the table. It can also be set as a property from the outside via JavaScript
         */
        "tabledata"?: string | object;
        /**
          * The verticalalign prop sets the data-vertical-align attribute on the thead element of the rendered table. Valid values are "top" (default), "middle", "bottom"
         */
        "verticalalign"?: string;
    }
    interface DbTag {
        /**
          * Attribute to add icon before tag.
         */
        "icon"?: string;
        /**
          * Attribute to add icon after tag.
         */
        "iconafter"?: string;
        /**
          * Attribute for changing the size of the tag.
         */
        "small"?: boolean;
        /**
          * Predefined variants to change background color and font color.
         */
        "variant"?: | 'informative'
    | 'success'
    | 'warning'
    | 'error'
    | 'track'
    | 'poi-essen-trinken'
    | 'poi-einkaufen'
    | 'poi-gesundheit'
    | 'poi-kunst-kultur'
    | 'poi-wissenswertes'
    | 'poi-freizeit'
    | 'poi-zivile-rel-einrichtungen'
    | 'poi-dienstleistungen'
    | 'poi-db-services-einrichtung'
    | 'poi-wegeleitung';
    }
    interface DbTextarea {
        /**
          * The ariainvalid attribute is used to indicate that the value entered into an input field does not conform to the format expected by the application.
         */
        "ariainvalid"?: | 'false'
    | 'grammar'
    | 'spelling'
    | 'true';
        /**
          * The ariarequired attribute can be applied to a form element, to indicate to an AT that it is required to complete the form.
         */
        "ariarequired"?: 'false' | 'true';
        /**
          * The autofocus content attribute allows the author to indicate that a control is to be focused as soon as the page is loaded, allowing the user to just start typing without having to manually focus the main control.
         */
        "autofocus"?: boolean;
        /**
          * The cols attribute specifies the expected maximum number of characters per line.
         */
        "cols"?: number;
        /**
          * The description attribute specifies the description/hint of the textarea.
         */
        "description"?: string;
        /**
          * The dirname attribute on a form control element enables the submission of the directionality of the element, and gives the name of the control that contains this value during form submission. If such an attribute is specified, its value must not be the empty string.
         */
        "dirname"?: string;
        /**
          * The disabled attribute can be set to keep a user from clicking on the input.
         */
        "disabled"?: boolean;
        /**
          * The input_id of a labelable form-related element in the same document as the label element. The first element in the document with an id matching the value of the for attribute is the labeled control for this label element, if it is a labelable element.
         */
        "input_id"?: string;
        /**
          * The label attribute specifies the caption of the input.
         */
        "label": string;
        /**
          * /* The maxlength attribute, controlled by a dirty value flag, declares a limit on the number of characters a user can input.
         */
        "maxlength"?: number;
        /**
          * /* The minlength attribute, when it applies, is a form control minlength attribute.
         */
        "minlength"?: number;
        /**
          * The name content attribute gives the name of the form control, as used in form submission and in the form element's elements object. If the attribute is specified, its value must not be the empty string.
         */
        "name": string;
        /**
          * Mapping for default change Event
         */
        "onDbChange"?: (event: DbTextareaCustomEvent<any>) => void;
        /**
          * The placeholder attribute represents a short hint (a word or short phrase) intended to aid the user with data entry.
         */
        "placeholder"?: string;
        /**
          * The readonly attribute controls whether or not the user can edit the form control.
         */
        "readonly"?: boolean;
        /**
          * The required attribute is a boolean attribute. When specified, the element is required.
         */
        "required"?: boolean;
        /**
          * The rows attribute specifies the number of lines to show.
         */
        "rows"?: number;
        /**
          * The value attribute reflects the changes to the textarea which are also emitted via event
         */
        "value"?: string;
        /**
          * The variant attribute specifies a visual expression of a select.
         */
        "variant"?: | 'semitransparent'
    | 'white'
    | 'solid'
    | 'outline';
        /**
          * The wrap attribute indicates how the control wraps text.
         */
        "wrap"?: 'soft' | 'hard' | 'off ';
    }
    interface DbToggle {
        /**
          * Checked property
         */
        "checked"?: boolean;
        /**
          * Disabled property
         */
        "disabled"?: boolean;
        /**
          * Optional id for the label - otherwise random id will be set
         */
        "htmlid"?: string;
        /**
          * The name attribute specifies a name for the included input element.
         */
        "name"?: string;
        /**
          * Mapping for default change Event
         */
        "onDbChange"?: (event: DbToggleCustomEvent<any>) => void;
    }
    interface GithubVersionSwitcher {
        /**
          * Provides the owner of the repo
         */
        "owner"?: string;
        /**
          * Provides the name of the repo
         */
        "repo"?: string;
    }
    interface IntrinsicElements {
        "db-accordion": DbAccordion;
        "db-brand": DbBrand;
        "db-breadcrumb": DbBreadcrumb;
        "db-button": DbButton;
        "db-card": DbCard;
        "db-cards": DbCards;
        "db-checkbox": DbCheckbox;
        "db-chip": DbChip;
        "db-dropdown": DbDropdown;
        "db-footer": DbFooter;
        "db-header": DbHeader;
        "db-headline": DbHeadline;
        "db-icon": DbIcon;
        "db-image": DbImage;
        "db-input": DbInput;
        "db-language-switcher": DbLanguageSwitcher;
        "db-link": DbLink;
        "db-linklist": DbLinklist;
        "db-logo": DbLogo;
        "db-mainnavigation": DbMainnavigation;
        "db-meta": DbMeta;
        "db-metanavigation": DbMetanavigation;
        "db-notification": DbNotification;
        "db-notifications": DbNotifications;
        "db-overflow-menu": DbOverflowMenu;
        "db-page": DbPage;
        "db-pagination": DbPagination;
        "db-progress": DbProgress;
        "db-radio": DbRadio;
        "db-select": DbSelect;
        "db-sidenavi": DbSidenavi;
        "db-tab": DbTab;
        "db-tab-bar": DbTabBar;
        "db-table": DbTable;
        "db-tag": DbTag;
        "db-textarea": DbTextarea;
        "db-toggle": DbToggle;
        "github-version-switcher": GithubVersionSwitcher;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "db-accordion": LocalJSX.DbAccordion & JSXBase.HTMLAttributes<HTMLDbAccordionElement>;
            "db-brand": LocalJSX.DbBrand & JSXBase.HTMLAttributes<HTMLDbBrandElement>;
            "db-breadcrumb": LocalJSX.DbBreadcrumb & JSXBase.HTMLAttributes<HTMLDbBreadcrumbElement>;
            "db-button": LocalJSX.DbButton & JSXBase.HTMLAttributes<HTMLDbButtonElement>;
            "db-card": LocalJSX.DbCard & JSXBase.HTMLAttributes<HTMLDbCardElement>;
            "db-cards": LocalJSX.DbCards & JSXBase.HTMLAttributes<HTMLDbCardsElement>;
            "db-checkbox": LocalJSX.DbCheckbox & JSXBase.HTMLAttributes<HTMLDbCheckboxElement>;
            "db-chip": LocalJSX.DbChip & JSXBase.HTMLAttributes<HTMLDbChipElement>;
            "db-dropdown": LocalJSX.DbDropdown & JSXBase.HTMLAttributes<HTMLDbDropdownElement>;
            "db-footer": LocalJSX.DbFooter & JSXBase.HTMLAttributes<HTMLDbFooterElement>;
            "db-header": LocalJSX.DbHeader & JSXBase.HTMLAttributes<HTMLDbHeaderElement>;
            "db-headline": LocalJSX.DbHeadline & JSXBase.HTMLAttributes<HTMLDbHeadlineElement>;
            "db-icon": LocalJSX.DbIcon & JSXBase.HTMLAttributes<HTMLDbIconElement>;
            "db-image": LocalJSX.DbImage & JSXBase.HTMLAttributes<HTMLDbImageElement>;
            "db-input": LocalJSX.DbInput & JSXBase.HTMLAttributes<HTMLDbInputElement>;
            "db-language-switcher": LocalJSX.DbLanguageSwitcher & JSXBase.HTMLAttributes<HTMLDbLanguageSwitcherElement>;
            "db-link": LocalJSX.DbLink & JSXBase.HTMLAttributes<HTMLDbLinkElement>;
            "db-linklist": LocalJSX.DbLinklist & JSXBase.HTMLAttributes<HTMLDbLinklistElement>;
            "db-logo": LocalJSX.DbLogo & JSXBase.HTMLAttributes<HTMLDbLogoElement>;
            "db-mainnavigation": LocalJSX.DbMainnavigation & JSXBase.HTMLAttributes<HTMLDbMainnavigationElement>;
            "db-meta": LocalJSX.DbMeta & JSXBase.HTMLAttributes<HTMLDbMetaElement>;
            "db-metanavigation": LocalJSX.DbMetanavigation & JSXBase.HTMLAttributes<HTMLDbMetanavigationElement>;
            "db-notification": LocalJSX.DbNotification & JSXBase.HTMLAttributes<HTMLDbNotificationElement>;
            "db-notifications": LocalJSX.DbNotifications & JSXBase.HTMLAttributes<HTMLDbNotificationsElement>;
            "db-overflow-menu": LocalJSX.DbOverflowMenu & JSXBase.HTMLAttributes<HTMLDbOverflowMenuElement>;
            "db-page": LocalJSX.DbPage & JSXBase.HTMLAttributes<HTMLDbPageElement>;
            "db-pagination": LocalJSX.DbPagination & JSXBase.HTMLAttributes<HTMLDbPaginationElement>;
            "db-progress": LocalJSX.DbProgress & JSXBase.HTMLAttributes<HTMLDbProgressElement>;
            "db-radio": LocalJSX.DbRadio & JSXBase.HTMLAttributes<HTMLDbRadioElement>;
            "db-select": LocalJSX.DbSelect & JSXBase.HTMLAttributes<HTMLDbSelectElement>;
            "db-sidenavi": LocalJSX.DbSidenavi & JSXBase.HTMLAttributes<HTMLDbSidenaviElement>;
            "db-tab": LocalJSX.DbTab & JSXBase.HTMLAttributes<HTMLDbTabElement>;
            "db-tab-bar": LocalJSX.DbTabBar & JSXBase.HTMLAttributes<HTMLDbTabBarElement>;
            "db-table": LocalJSX.DbTable & JSXBase.HTMLAttributes<HTMLDbTableElement>;
            "db-tag": LocalJSX.DbTag & JSXBase.HTMLAttributes<HTMLDbTagElement>;
            "db-textarea": LocalJSX.DbTextarea & JSXBase.HTMLAttributes<HTMLDbTextareaElement>;
            "db-toggle": LocalJSX.DbToggle & JSXBase.HTMLAttributes<HTMLDbToggleElement>;
            "github-version-switcher": LocalJSX.GithubVersionSwitcher & JSXBase.HTMLAttributes<HTMLGithubVersionSwitcherElement>;
        }
    }
}
