{"file":"db-image.entry.js","mappings":";;;AAAA,MAAM,UAAU,GAAG,o/HAAo/H;;MCQ1/H,OAAO;;;;;;;;;;;;kBA0CyB,QAAQ,GAAG,IAAI,EAAE;;EAEpD,aAAa;IACnB,QACE,WACE,KAAK,EAAC,WAAW,EACjB,GAAG,EAAE,IAAI,CAAC,GAAG,EACb,GAAG,EAAE,IAAI,CAAC,GAAG,EACb,KAAK,EAAE,IAAI,CAAC,KAAK,EACjB,MAAM,EAAE,IAAI,CAAC,MAAM,EACnB,MAAM,EAAE,IAAI,CAAC,MAAM,EACnB,OAAO,EAAE,IAAI,CAAC,OAAO,qBACJ,IAAI,CAAC,OAAO,IAAI,IAAI,CAAC,MAAM,GAC5C,EACF;GACH;EACO,wBAAwB;IAC9B,IAAI,IAAI,CAAC,OAAO,KAAK,SAAS,EAAE;MAC9B,QACE,kBACG,IAAI,CAAC,aAAa,EAAE,EACrB,kBAAY,EAAE,EAAE,IAAI,CAAC,MAAM,IAAG,IAAI,CAAC,OAAO,CAAc,CACjD,EACT;KACH;SAAM;MACL;QACE,OAAO,IAAI,CAAC,aAAa,EAAE,CAAC;OAC7B;KACF;GACF;EAEO,iBAAiB;IACvB,MAAM,aAAa,GAAG,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,CAAC,WAAW,EAAE,CAAC;IACvE,QACE,mBACE,cAAQ,MAAM,EAAE,IAAI,CAAC,YAAY,EAAE,IAAI,EAAE,UAAU,aAAa,EAAE,GAAI,EACrE,IAAI,CAAC,aAAa,EAAE,CACb,EACV;GACH;EACO,2BAA2B;IACjC,QACE,mBACG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,oBAAoB,CAAC,CAAC,GAAG,CAAC,CAAC,KAAK,EAAE,KAAK,MACtD,cACE,GAAG,EAAE,WAAW,KAAK,EAAE,EACvB,MAAM,EAAE,KAAK,CAAC,MAAM,EACpB,KAAK,EAAE,KAAK,CAAC,KAAK,GAClB,CACH,CAAC,EACD,IAAI,CAAC,aAAa,EAAE,CACb,EACV;GACH;EAEO,qBAAqB;IAC3B,IAAI,IAAI,CAAC,OAAO,KAAK,SAAS,EAAE;MAC9B,QACE,kBACG,IAAI,CAAC,iBAAiB,EAAE,EACzB,kBAAY,EAAE,EAAE,IAAI,CAAC,MAAM,IAAG,IAAI,CAAC,OAAO,CAAc,CACjD,EACT;KACH;SAAM;MACL;QACE,OAAO,IAAI,CAAC,iBAAiB,EAAE,CAAC;OACjC;KACF;GACF;EAED,MAAM;IACJ,QACE,EAAC,IAAI,QACF,CAAC,IAAI,CAAC,YAAY,IAAI,IAAI,CAAC,qBAAqB,EAAE;OAChD,IAAI,CAAC,oBAAoB,IAAI,IAAI,CAAC,2BAA2B,EAAE,CAAC;MACjE,IAAI,CAAC,wBAAwB,EAAE,CAC5B,EACP;GACH;;;;;;","names":[],"sources":["src/components/db-image/db-image.scss?tag=db-image&encapsulation=scoped","src/components/db-image/db-image.tsx"],"sourcesContent":["@import 'db-ui-core.general';\n@import 'image';\n\nfigure {\n  margin: 0;\n}\n","import { Component, h, Host, Prop } from '@stencil/core';\nimport { uuid } from '../../utils/utils';\n\n@Component({\n  tag: 'db-image',\n  styleUrl: 'db-image.scss',\n  scoped: true\n})\nexport class DbImage {\n  /**\n   * The image src URL.\n   */\n  @Prop({ reflect: true }) src!: string;\n  /**\n   * Optional modern image format srcset URL (like avif or webp).\n   */\n  @Prop({ reflect: false }) modernformat: string;\n  /**\n   * Optional srcset for high density images\n   */\n  @Prop({ reflect: false }) srcset: string;\n  /**\n   * The alt attribute is used by \"screen reader\" software so that a person who is listening to the content of a webpage (for instance, a person who is blind) can interact with this element.\n   */\n  @Prop({ reflect: true }) alt!: string;\n\n  /**\n   * Width for the image\n   */\n  @Prop({ reflect: true }) width!: number;\n\n  /**\n   * Height for the image\n   */\n  @Prop({ reflect: true }) height!: number;\n  /**\n   * Optional lazy loading attribute\n   */\n  @Prop({ reflect: false }) loading: 'lazy';\n  /**\n   * Optional caption for the image\n   */\n  @Prop({ reflect: false }) caption: string;\n  /**\n   * Optional responsive media queries as array of objects '[{srcset:\"/path/to/picture.extension\", media:\"(min-width: 768px)\"}]'\n   */\n  @Prop({ reflect: false }) responsivemediaquery: string;\n  /**\n   * Optional id for the caption aria label - otherwise random id will be set\n   */\n  @Prop({ reflect: false }) ariaid: string = 'image-' + uuid();\n\n  private getBasicImage() {\n    return (\n      <img\n        class=\"elm-image\"\n        alt={this.alt}\n        src={this.src}\n        width={this.width}\n        srcSet={this.srcset}\n        height={this.height}\n        loading={this.loading}\n        aria-labelledby={this.caption && this.ariaid}\n      />\n    );\n  }\n  private basicImageCaptionWrapper() {\n    if (this.caption !== undefined) {\n      return (\n        <figure>\n          {this.getBasicImage()}\n          <figcaption id={this.ariaid}>{this.caption}</figcaption>\n        </figure>\n      );\n    } else {\n      {\n        return this.getBasicImage();\n      }\n    }\n  }\n\n  private getPictureWrapper() {\n    const fileExtension = this.modernformat.split('.').pop().toLowerCase();\n    return (\n      <picture>\n        <source srcSet={this.modernformat} type={`'image/${fileExtension}`} />\n        {this.getBasicImage()}\n      </picture>\n    );\n  }\n  private getResponsivePictureWrapper() {\n    return (\n      <picture>\n        {JSON.parse(this.responsivemediaquery).map((query, index) => (\n          <source\n            key={`picture-${index}`}\n            srcSet={query.srcset}\n            media={query.media}\n          />\n        ))}\n        {this.getBasicImage()}\n      </picture>\n    );\n  }\n\n  private pictureCaptionWrapper() {\n    if (this.caption !== undefined) {\n      return (\n        <figure>\n          {this.getPictureWrapper()}\n          <figcaption id={this.ariaid}>{this.caption}</figcaption>\n        </figure>\n      );\n    } else {\n      {\n        return this.getPictureWrapper();\n      }\n    }\n  }\n\n  render() {\n    return (\n      <Host>\n        {(this.modernformat && this.pictureCaptionWrapper()) ||\n          (this.responsivemediaquery && this.getResponsivePictureWrapper()) ||\n          this.basicImageCaptionWrapper()}\n      </Host>\n    );\n  }\n}\n"],"version":3}