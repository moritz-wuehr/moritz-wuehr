{"file":"db-table.entry.js","mappings":"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","names":[],"sources":["src/components/db-table/db-table.scss?tag=db-table&encapsulation=scoped","src/components/db-table/db-table.tsx"],"sourcesContent":["@import '../general';\n@import 'table';\n","import { Component, h, Prop, Watch } from '@stencil/core';\nimport { TableDataType } from './type';\n\n@Component({\n  tag: 'db-table',\n  styleUrl: 'db-table.scss',\n  scoped: true\n})\nexport class DbTable {\n  private errorTableData: TableDataType = {\n    caption: 'No valid table data provided',\n    headers: ['Error parsing data'],\n    columns: {\n      'Error parsing data': ['please check data']\n    },\n    rows: [\n      {\n        error: [undefined, 'Error parsing data']\n      }\n    ]\n  };\n\n  /**\n   * The tabledata prop receives a stringified object of the type\n   * \"TableDataType\" and sets the initial value of the table.\n   * It can also be set as a property from the outside via JavaScript\n   */\n  @Prop({ reflect: false }) tabledata: string | object;\n\n  /**\n   * Either holds the value of the validated tabledata prop or \"errorTableData\"\n   */\n  private validTableData: TableDataType;\n\n  /**\n   * Validates and sets the value of validTableData upon modification of the\n   * tabledata attribute/property.\n   */\n  @Watch('tabledata')\n  validateTableData(newTableData: TableDataType) {\n    const { caption, headers, columns, rows } = newTableData;\n    const columnKeys =\n      typeof columns === 'object' && columns !== null\n        ? Object.keys(columns)\n        : [];\n    const isHeader = headers?.length > 0;\n    const isRowAndColumn = Array.isArray(rows) && columnKeys.length > 0;\n\n    if (!caption || isRowAndColumn || !isHeader) {\n      // eslint-disable-next-line no-console\n      console.error(\n        'Table data invalid: check caption or headers/columns mismatch'\n      );\n      this.validTableData = this.errorTableData;\n      return;\n    }\n    this.validTableData = newTableData;\n  }\n\n  /**\n   * Validate incoming table data props once on creation because they do not fire @watch\n   */\n  componentWillLoad() {\n    this.validateTableData(this.parseTabularData(this.tabledata));\n  }\n\n  /**\n   * The align prop sets the data-align attribute on the thead\n   * element of the rendered table. Valid values are \"left\" (default), \"center\",\n   * \"bottom\"\n   */\n  @Prop({ reflect: true }) align?: string = '';\n\n  /**\n   * The verticalalign prop sets the data-vertical-align attribute on\n   * the thead element of the rendered table. Valid values are \"top\"\n   * (default), \"middle\", \"bottom\"\n   */\n  @Prop({ reflect: true }) verticalalign?: string = '';\n\n  /**\n   * The bodyalign prop sets the data-align attribute on\n   * the tbody element of the rendered table. Valid values are \"left\"\n   * (default), \"center\", \"bottom\"\n   */\n  @Prop({ reflect: true }) bodyalign?: string = '';\n\n  /**\n   * The bodyverticalalign prop sets the data-vertical-align attribute\n   * on the tbody element of the rendered table. Valid values are \"top\"\n   * (default), \"middle\", \"bottom\"\n   */\n  @Prop({ reflect: true }) bodyverticalalign?: string = '';\n\n  /**\n   * The border prop sets the data-border attribute\n   * on the table element of the rendered table. Valid values are \"around\",\n   * \"horizontal\"\n   */\n  @Prop({ reflect: true }) border?: string = '';\n\n  /**\n   * The density prop sets the data-density attribute\n   * on the table element of the rendered table. Valid values are \"small\",\n   * \"regular\", \"large\"\n   */\n  @Prop({ reflect: true }) density?: string = '';\n\n  /**\n   * The fontsize prop sets the the font size of the style attribute\n   * on the table element of the rendered table.\n   */\n  @Prop({ reflect: true }) fontsize?: string = '1rem';\n\n  /**\n   * The stripes prop sets the the zebra stripes coloring of the rendered table.\n   */\n  @Prop({ reflect: true }) stripes?: string = '';\n\n  /**\n   * The sticky prop sets the table header stickyness of the rendered table.\n   */\n  @Prop({ reflect: true }) sticky?: string = '';\n\n  /**\n   * Without framework (Angular, React, Vue) we will need to pass a tabledata as\n   * string. parseTabularData() will return a fallback so the renderd table can\n   * inform the user about a mismatching value if the string cannot be parsed.\n   */\n  private parseTabularData(item: string | object) {\n    try {\n      if (typeof item === 'string') {\n        return JSON.parse(item);\n      }\n      if (typeof item === 'object') return item;\n    } catch (error) {\n      return this.errorTableData;\n    }\n  }\n\n  /**\n   * We need to know which column of the table is the longest so we can fill\n   * shorter columns with empty cells\n   */\n  private calcColumnLength(\n    tableHeaders: TableDataType['headers'],\n    tableColumns: TableDataType['columns']\n  ) {\n    return tableColumns === undefined\n      ? []\n      : tableHeaders.reduce((prevCol, currentCol) => {\n          return prevCol < tableColumns[currentCol].length\n            ? tableColumns[currentCol].length\n            : prevCol;\n        }, 0);\n  }\n\n  private isRowData(tableData) {\n    return !!Array.isArray(tableData.rows);\n  }\n\n  render() {\n    const isRowData = this.isRowData(this.validTableData);\n    const { caption, headers, columns, rows, rowTitles, rowTitle } =\n      this.validTableData;\n    const maxColumnLength = this.calcColumnLength(headers, columns);\n    const columnIter = [...Array(maxColumnLength).keys()];\n    const showRowTitles = rowTitles?.length > 0;\n\n    return (\n      <div>\n        <table\n          class=\"cmp-table\"\n          data-border={this.border ? this.border : null}\n          data-density={this.density ? this.density : null}\n          style={{ '--table---fontSize': this.fontsize }}\n          data-rows={this.stripes ? this.stripes : null}\n          data-sticky={this.sticky ? this.sticky : null}\n        >\n          <caption>{caption}</caption>\n          <thead\n            data-align={this.align ? this.align : null}\n            data-vertical-align={this.verticalalign ? this.verticalalign : null}\n          >\n            <tr>\n              {rowTitle && <th scope=\"col\">{rowTitle}</th>}\n              {headers.map((head, index) => (\n                <th key={`table-header-${index}`} scope=\"col\">\n                  {head}\n                </th>\n              ))}\n            </tr>\n          </thead>\n          <tbody\n            data-align={this.bodyalign ? this.bodyalign : null}\n            data-vertical-align={\n              this.bodyverticalalign ? this.bodyverticalalign : null\n            }\n          >\n            {isRowData &&\n              rows.map((obj, idx) => {\n                return (\n                  <tr key={`row-${idx}`} class={`row-${idx}`}>\n                    {showRowTitles && <th scope=\"row\">{rowTitles[idx]}</th>}\n                    {headers.map((table, index) => {\n                      // If no row is provided, return empty cell [null, null]\n                      const [icon, cellText] = obj[table] ?? [null, null];\n                      return (\n                        <td key={`cell-${idx}-${index}`}>\n                          {icon && <db-icon icon={icon} />}\n                          {cellText}\n                        </td>\n                      );\n                    })}\n                  </tr>\n                );\n              })}\n            {!isRowData &&\n              columnIter.map((num, idx) => (\n                <tr key={`row-${idx}`} class={`row-${num}`}>\n                  {showRowTitles && <th scope=\"row\">{rowTitles[idx]}</th>}\n                  {headers.map((table, index) => {\n                    const [icon, cellText] = columns[table][idx] ?? [\n                      null,\n                      null\n                    ];\n                    return (\n                      <td key={`cell-${idx}-${index}`}>\n                        {icon && <db-icon icon={icon} />}\n                        {cellText}\n                      </td>\n                    );\n                  })}\n                </tr>\n              ))}\n          </tbody>\n        </table>\n      </div>\n    );\n  }\n}\n"],"version":3}