{"file":"db-sidenavi.entry.js","mappings":";;;AAAA,MAAM,aAAa,GAAG,inUAAinU;;ACOvoU,MAAM,eAAe,GAAG,CAAC,QAAsB;EAC7C,IAAI,CAAC,QAAQ;IAAE,OAAO,EAAE,CAAC;EACzB,OAAO,QAAQ;KACZ,GAAG,CACF,CAAC,IAAI,KACH,sBAAsB,IAAI,CAAC,IAAI,aAC7B,IAAI,CAAC,MACP,mBAAmB,IAAI,CAAC,IAAI,GAAG,YAAY,GAAG,KAAK,WACjD,IAAI,CAAC,IACP,cAAc,IAAI,CAAC,WAAW,KAAK,IAAI,CAAC,KAAK,iBAAiB,CACjE;KACA,IAAI,CAAC,IAAI,CAAC,CAAC;AAChB,CAAC,CAAC;MAMW,UAAU;;;;;EASrB,IAAI,QAAQ;IACV,OAAO,IAAI,CAAC,SAAS,CAAC;GACvB;EAED,IAAI,QAAQ,CAAC,KAAgB;IAC3B,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC;GACxB;EAKD,iBAAiB;IACf,IAAI,IAAI,CAAC,IAAI,EAAE;MACb,IAAI,CAAC,QAAQ,GAAG,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;KACtC;SAAM;MACL,mCAAmC,CAAC,IAAI,CAAC,IAAI,EAAE,YAAY,CAAC,CAAC;MAC7D,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;MAChD,IAAI,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,KAAK,KAAK,KAAK,CAAC,OAAO,CAAC,WAAW,EAAE,KAAK,IAAI,CAAC,EAAE;QACvE,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC;OAC7B;WAAM;QACL,IAAI,CAAC,IAAI,CAAC,SAAS,GAAG,EAAE,CAAC;OAC1B;KACF;GACF;EAED,MAAM;IACJ,QACE,WAAK,KAAK,EAAC,cAAc,IACtB,IAAI,CAAC,QAAQ,IAAI,UAAI,SAAS,EAAE,eAAe,CAAC,IAAI,CAAC,QAAQ,CAAC,GAAI,EAClE,CAAC,IAAI,CAAC,QAAQ,KACb,cACG,CAAC,IAAI,CAAC,eAAe;MACpB,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,KAAK,EAAE,KAAK,MAC9B,UACE,GAAG,EAAE,iBAAiB,KAAK,EAAE,EAC7B,SAAS,EAAE,KAAK,CAAC,SAAS,GAC1B,CACH,CAAC,EACH,IAAI,CAAC,eAAe,IAAI,eAAQ,CAC9B,CACN,CACG,EACN;GACH;;;;;;;","names":[],"sources":["src/components/db-sidenavi/db-sidenavi.scss?tag=db-sidenavi","src/components/db-sidenavi/db-sidenavi.tsx"],"sourcesContent":["@import '../general';\n@import 'sidenavi';\n\n.cmp-sidenavi {\n  a {\n    @extend .elm-link;\n  }\n\n  db-icon {\n    margin-right: to-rem(6);\n  }\n}\n","import { Component, h, Element, Prop } from '@stencil/core';\nimport {\n  addIconVariantToAllDbLinksRecursive,\n  parseData\n} from '../../utils/utils';\nimport { DbLinkType } from '../db-link/db-link-type';\n\nconst getCompDataHtml = (compData: DbLinkType[]) => {\n  if (!compData) return '';\n  return compData\n    .map(\n      (data) =>\n        `<li><db-link href=\"${data.href}\" target=\"${\n          data.target\n        }\" icon-variant=\"${data.icon ? '32-outline' : false}\" icon=\"${\n          data.icon\n        }\" current=\"${data.ariaCurrent}\">${data.label}</db-link></li>`\n    )\n    .join('\\n');\n};\n\n@Component({\n  tag: 'db-sidenavi',\n  styleUrl: 'db-sidenavi.scss'\n})\nexport class DbSidenavi {\n  /**\n   * The data attribute can be used to generate sidenav by data.\n   */\n  @Prop({ reflect: true }) data?: string;\n  private compData: DbLinkType[];\n\n  private hasItemsWrapper: boolean;\n\n  get children(): Element[] {\n    return this._children;\n  }\n\n  set children(value: Element[]) {\n    this._children = value;\n  }\n  private _children: Element[];\n\n  @Element() host: HTMLDbSidenaviElement;\n\n  componentWillLoad() {\n    if (this.data) {\n      this.compData = parseData(this.data);\n    } else {\n      addIconVariantToAllDbLinksRecursive(this.host, '32-outline');\n      this._children = Array.from(this.host.children);\n      if (this.children.find((child) => child.tagName.toLowerCase() === 'li')) {\n        this.hasItemsWrapper = true;\n      } else {\n        this.host.innerHTML = '';\n      }\n    }\n  }\n\n  render() {\n    return (\n      <nav class=\"cmp-sidenavi\">\n        {this.compData && <ol innerHTML={getCompDataHtml(this.compData)} />}\n        {!this.compData && (\n          <ol>\n            {!this.hasItemsWrapper &&\n              this._children.map((child, index) => (\n                <li\n                  key={`sidenavi-item-${index}`}\n                  innerHTML={child.outerHTML}\n                />\n              ))}\n            {this.hasItemsWrapper && <slot />}\n          </ol>\n        )}\n      </nav>\n    );\n  }\n}\n"],"version":3}