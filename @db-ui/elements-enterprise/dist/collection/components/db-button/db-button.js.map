{"version":3,"file":"db-button.js","sourceRoot":"","sources":["../../../src/components/db-button/db-button.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,CAAC,EAAE,IAAI,EAAE,MAAM,eAAe,CAAC;AAMnD,MAAM,OAAO,QAAQ;;wBAIwC,IAAI;uBAKL,IAAI;oBAKhB,KAAK;;;;0BAoBC,KAAK;;;;;;;gBAmCM,QAAQ;;;;;EAsBvE,MAAM;IACJ,OAAO,CACL,cACE,KAAK,EAAE,YAAY,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,uBAAuB,CAAC,CAAC,CAAC,EAAE,CAAC,mBACrD,IAAI,CAAC,YAAY,kBAClB,IAAI,CAAC,WAAW,kBAChB,IAAI,CAAC,OAAO,EAC1B,QAAQ,EAAE,IAAI,CAAC,QAAQ,EACvB,UAAU,EAAE,IAAI,CAAC,UAAU,EAC3B,WAAW,EAAE,IAAI,CAAC,WAAW,EAC7B,UAAU,EAAE,IAAI,CAAC,UAAU,EAC3B,cAAc,EAAE,IAAI,CAAC,cAAc,EACnC,UAAU,EAAE,IAAI,CAAC,UAAU,EAC3B,IAAI,EAAE,IAAI,CAAC,IAAI,EACf,KAAK,EAAE,IAAI,CAAC,OAAO,EACnB,IAAI,EAAE,IAAI,CAAC,IAAI,EACf,KAAK,EAAE,IAAI,CAAC,KAAK,eACN,IAAI,CAAC,IAAI;MAEnB,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,eAAS,IAAI,EAAE,IAAI,CAAC,IAAI,GAAI,CAAC,CAAC,CAAC,IAAI;MAChD,eAAQ;MACP,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,CAChB,eAAS,IAAI,EAAE,IAAI,CAAC,SAAS,EAAE,KAAK,EAAC,WAAW,GAAG,CACpD,CAAC,CAAC,CAAC,IAAI,CACD,CACV,CAAC;EACJ,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CACF","sourcesContent":["import { Component, h, Prop } from '@stencil/core';\n\n@Component({\n  tag: 'db-button',\n  styleUrl: 'db-button.scss'\n})\nexport class DbButton {\n  /**\n   * If the button controls a grouping of other elements, the ariaexpanded state indicates whether the controlled grouping is currently expanded or collapsed.\n   */\n  @Prop({ reflect: true }) ariaexpanded?: 'true' | 'false' = null;\n\n  /**\n   * Defines the button as a toggle button. The value of aria-pressed describes the state of the button.\n   */\n  @Prop({ reflect: true }) ariapressed?: 'true' | 'false' = null;\n\n  /**\n   * The disabled attribute can be set to keep a user from clicking on the button.\n   */\n  @Prop({ reflect: true }) disabled?: boolean = false;\n\n  /**\n   * The formaction attribute specifies where to send the form-data when a form is submitted. Only for type=\"submit\".\n   */\n  @Prop({ reflect: true }) formaction?: string;\n\n  /**\n   * The formenctype attribute specifies how form-data should be encoded before sending it to a server. Only for type=\"submit\".\n   */\n  @Prop({ reflect: true }) formenctype?: string;\n\n  /**\n   * The formmethod attribute specifies how to send the form-data (which HTTP method to use). Only for type=\"submit\".\n   */\n  @Prop({ reflect: true }) formmethod?: 'get' | 'post';\n\n  /**\n   * The formnovalidate attribute specifies which that the form-data should not be validated on submission. Only for type=\"submit\".\n   */\n  @Prop({ reflect: true }) formnovalidate?: boolean = false;\n\n  /**\n   * The formtarget attribute specifies where to display the response after submitting the form. Only for type=\"submit\".\n   */\n  @Prop({ reflect: true }) formtarget?: '_self' | '_blank' | '_parent' | '_top';\n\n  /**\n   * Define an icon by it's identifier (like e.g. _download_, compare to [DB UI Icons](https://db-ui.github.io/core/patterns/base-icons/index.html)) to get displayed in front of the elements content.\n   */\n  @Prop({ reflect: true }) icon?: string;\n\n  /**\n   * Define an icon by it's identifier (like e.g. _download_, compare to [DB UI Icons](https://db-ui.github.io/core/patterns/base-icons/index.html)) to get displayed behind the elements content.\n   */\n  @Prop({ reflect: true }) iconafter?: string;\n\n  /**\n   * Define the text next to the icon specified via the icon Property to get hidden.\n   */\n  @Prop({ reflect: true }) icononly?: boolean;\n\n  /**\n   * The name attribute specifies a name for the button.\n   */\n  @Prop({ reflect: true }) name?: string;\n\n  /**\n   * The tooltip attribute specifies the title of button.\n   */\n  @Prop({ reflect: true }) tooltip?: string;\n\n  /**\n   * The type attribute specifies the type of button.\n   */\n  @Prop({ reflect: true }) type: 'button' | 'reset' | 'submit' = 'submit';\n\n  /**\n   * The value attribute specifies an initial value for the button.\n   */\n  @Prop({ reflect: true }) value?: string;\n\n  /**\n   * The variant attribute specifies a visual expression of button.\n   */\n  @Prop({ reflect: true }) variant:\n    | 'primary'\n    | 'secondary-outline'\n    | 'secondary-solid'\n    | 'tertiary-plain'\n    | 'brand-primary';\n\n  /**\n   * The size attribute specifies the button size out of three sizes.\n   */\n  @Prop({ reflect: true }) size?: 'small' | 'regular' | 'large';\n\n  render() {\n    return (\n      <button\n        class={'elm-button' + (this.icononly ? ' is-icon-text-replace' : '')}\n        aria-expanded={this.ariaexpanded}\n        aria-pressed={this.ariapressed}\n        data-variant={this.variant}\n        disabled={this.disabled}\n        formaction={this.formaction}\n        formenctype={this.formenctype}\n        formmethod={this.formmethod}\n        formnovalidate={this.formnovalidate}\n        formtarget={this.formtarget}\n        name={this.name}\n        title={this.tooltip}\n        type={this.type}\n        value={this.value}\n        data-size={this.size}\n      >\n        {this.icon ? <db-icon icon={this.icon} /> : null}\n        <slot />\n        {this.iconafter ? (\n          <db-icon icon={this.iconafter} class=\"iconafter\" />\n        ) : null}\n      </button>\n    );\n  }\n}\n"]}