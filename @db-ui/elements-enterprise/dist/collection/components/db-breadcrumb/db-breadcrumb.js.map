{"version":3,"file":"db-breadcrumb.js","sourceRoot":"","sources":["../../../src/components/db-breadcrumb/db-breadcrumb.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,OAAO,EAAE,CAAC,EAAE,IAAI,EAAE,MAAM,eAAe,CAAC;AAE5D,OAAO,EAAE,SAAS,EAAE,MAAM,mBAAmB,CAAC;AAE9C,MAAM,eAAe,GAAG,CAAC,QAAsB,EAAE,EAAE;EACjD,IAAI,CAAC,QAAQ;IAAE,OAAO,EAAE,CAAC;EACzB,OAAO,QAAQ;KACZ,GAAG,CACF,CAAC,IAAI,EAAE,EAAE,CACP,sBAAsB,IAAI,CAAC,IAAI,aAAa,IAAI,CAAC,MAAM,KAAK,IAAI,CAAC,KAAK,iBAAiB,CAC1F;KACA,IAAI,CAAC,IAAI,CAAC,CAAC;AAChB,CAAC,CAAC;AAKF,MAAM,OAAO,YAAY;;;;;EAcvB,IAAI,QAAQ;IACV,OAAO,IAAI,CAAC,SAAS,CAAC;EACxB,CAAC;EAED,IAAI,QAAQ,CAAC,KAAgB;IAC3B,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC;EACzB,CAAC;EAKD,iBAAiB;IACf,IAAI,IAAI,CAAC,IAAI,EAAE;MACb,IAAI,CAAC,QAAQ,GAAG,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;KACtC;SAAM;MACL,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;MAChD,IAAI,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,KAAK,CAAC,OAAO,CAAC,WAAW,EAAE,KAAK,IAAI,CAAC,EAAE;QACvE,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC;OAC7B;WAAM;QACL,IAAI,CAAC,IAAI,CAAC,SAAS,GAAG,EAAE,CAAC;OAC1B;KACF;EACH,CAAC;EAED,MAAM;IACJ,OAAO,CACL,WAAK,KAAK,EAAC,gBAAgB,gBAAa,IAAI,CAAC,SAAS;MACnD,IAAI,CAAC,QAAQ,IAAI,UAAI,SAAS,EAAE,eAAe,CAAC,IAAI,CAAC,QAAQ,CAAC,GAAI;MAClE,CAAC,IAAI,CAAC,QAAQ,IAAI,CACjB;QACG,CAAC,IAAI,CAAC,eAAe;UACpB,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,KAAK,EAAE,KAAK,EAAE,EAAE,CAAC,CACnC,UACE,GAAG,EAAE,uBAAuB,KAAK,EAAE,EACnC,SAAS,EAAE,KAAK,CAAC,SAAS,GAC1B,CACH,CAAC;QACH,IAAI,CAAC,eAAe,IAAI,eAAQ,CAC9B,CACN,CACG,CACP,CAAC;EACJ,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CACF","sourcesContent":["import { Component, Element, h, Prop } from '@stencil/core';\nimport { DbLinkType } from '../db-link/db-link-type';\nimport { parseData } from '../../utils/utils';\n\nconst getCompDataHtml = (compData: DbLinkType[]) => {\n  if (!compData) return '';\n  return compData\n    .map(\n      (data) =>\n        `<li><db-link href=\"${data.href}\" target=\"${data.target}\">${data.label}</db-link></li>`\n    )\n    .join('\\n');\n};\n@Component({\n  tag: 'db-breadcrumb',\n  styleUrl: 'db-breadcrumb.scss'\n})\nexport class DbBreadcrumb {\n  /**\n   * The data attribute can be used to generate breadcrumb by data.\n   */\n  @Prop({ reflect: true }) data?: string;\n\n  /**\n   * an optional [`aria-label`-attribute](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-label)\n   */\n  @Prop({ reflect: true }) arialabel: string;\n  private compData: DbLinkType[];\n\n  private hasItemsWrapper: boolean;\n\n  get children(): Element[] {\n    return this._children;\n  }\n\n  set children(value: Element[]) {\n    this._children = value;\n  }\n  private _children: Element[];\n\n  @Element() host: HTMLDbBreadcrumbElement;\n\n  componentWillLoad() {\n    if (this.data) {\n      this.compData = parseData(this.data);\n    } else {\n      this._children = Array.from(this.host.children);\n      if (this.children.find((child) => child.tagName.toLowerCase() === 'li')) {\n        this.hasItemsWrapper = true;\n      } else {\n        this.host.innerHTML = '';\n      }\n    }\n  }\n\n  render() {\n    return (\n      <nav class=\"cmp-breadcrumb\" aria-label={this.arialabel}>\n        {this.compData && <ol innerHTML={getCompDataHtml(this.compData)} />}\n        {!this.compData && (\n          <ol>\n            {!this.hasItemsWrapper &&\n              this._children.map((child, index) => (\n                <li\n                  key={`cmp-breadcrumb-item-${index}`}\n                  innerHTML={child.outerHTML}\n                />\n              ))}\n            {this.hasItemsWrapper && <slot />}\n          </ol>\n        )}\n      </nav>\n    );\n  }\n}\n"]}